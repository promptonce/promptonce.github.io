<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PromptOnce</title>
  
  
  <link href="https://promptonce.github.io/atom.xml" rel="self"/>
  
  <link href="https://promptonce.github.io/"/>
  <updated>2024-10-23T06:05:19.119Z</updated>
  <id>https://promptonce.github.io/</id>
  
  <author>
    <name>penggan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>yarn&amp;npm常见命令总结</title>
    <link href="https://promptonce.github.io/2024/10/23/yarn&amp;npm%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/23/yarn&amp;npm%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-23T05:49:22.000Z</published>
    <updated>2024-10-23T06:05:19.119Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># ==========================================================</span><br><span class="line"># <span class="variable constant_">NPM</span></span><br><span class="line"># ==========================================================</span><br><span class="line"></span><br><span class="line">npm set registry <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com # 注册模块镜像</span></span><br><span class="line">npm set disturl <span class="attr">https</span>:<span class="comment">//npmmirror.com/mirrors/node # node-gyp 编译依赖的 node 源码镜像</span></span><br><span class="line"></span><br><span class="line">## 以下选择添加</span><br><span class="line">npm set sass_binary_site <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/node-sass # node-sass 二进制包镜像</span></span><br><span class="line">npm set electron_mirror <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/electron/ # electron 二进制包镜像</span></span><br><span class="line">npm set puppeteer_download_host <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors # puppeteer 二进制包镜像</span></span><br><span class="line">npm set chromedriver_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/chromedriver # chromedriver 二进制包镜像</span></span><br><span class="line">npm set operadriver_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/operadriver # operadriver 二进制包镜像</span></span><br><span class="line">npm set phantomjs_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/phantomjs # phantomjs 二进制包镜像</span></span><br><span class="line">npm set selenium_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/selenium # selenium 二进制包镜像</span></span><br><span class="line">npm set node_inspector_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/node-inspector # node-inspector 二进制包镜像</span></span><br><span class="line">npm set sentrycli_cdnurl <span class="attr">https</span>:<span class="comment">//npmmirror.com/mirrors/sentry-cli/ # sentry-cli</span></span><br><span class="line"></span><br><span class="line">npm cache clean --force # 清空缓存</span><br><span class="line"></span><br><span class="line"># ==========================================================</span><br><span class="line"># <span class="variable constant_">YARN</span></span><br><span class="line"># ==========================================================</span><br><span class="line"></span><br><span class="line">yarn config set registry <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com # 注册模块镜像</span></span><br><span class="line">yarn config set disturl <span class="attr">https</span>:<span class="comment">//npmmirror.com/mirrors/node # node-gyp 编译依赖的 node 源码镜像</span></span><br><span class="line"></span><br><span class="line">## 以下选择添加</span><br><span class="line">yarn config set sass_binary_site <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/node-sass # node-sass 二进制包镜像</span></span><br><span class="line">yarn config set electron_mirror <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/electron/ # electron 二进制包镜像</span></span><br><span class="line">yarn config set puppeteer_download_host <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors # puppeteer 二进制包镜像</span></span><br><span class="line">yarn config set chromedriver_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/chromedriver # chromedriver 二进制包镜像</span></span><br><span class="line">yarn config set operadriver_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/operadriver # operadriver 二进制包镜像</span></span><br><span class="line">yarn config set phantomjs_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/phantomjs # phantomjs 二进制包镜像</span></span><br><span class="line">yarn config set selenium_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/selenium # selenium 二进制包镜像</span></span><br><span class="line">yarn config set node_inspector_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/node-inspector # node-inspector 二进制包镜像</span></span><br><span class="line">yarn config set sentrycli_cdnurl <span class="attr">https</span>:<span class="comment">//npmmirror.com/mirrors/sentry-cli/ # sentry-cli</span></span><br><span class="line"></span><br><span class="line">yarn cache clean # 清空缓存</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn --network-timeout <span class="number">100000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>开源项目配置到服务器总结</title>
    <link href="https://promptonce.github.io/2024/10/23/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/23/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-23T04:58:46.000Z</published>
    <updated>2024-10-23T05:01:20.618Z</updated>
    
    <content type="html"><![CDATA[<p>在本地设备打包好所有依赖，通过服务器连接工具上传整个安装包，相当于执行离线安装。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在本地设备打包好所有依赖，通过服务器连接工具上传整个安装包，相当于执行离线安装。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>动态规划算法</title>
    <link href="https://promptonce.github.io/2024/10/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95/"/>
    <id>https://promptonce.github.io/2024/10/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95/</id>
    <published>2024-10-22T07:59:58.000Z</published>
    <updated>2024-10-22T08:01:11.838Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划是一种将复杂问题分解为更小的子问题并通过缓存子问题的解来避免重复计算的算法设计方法。它适用于具有<strong>重叠子问题</strong>和<strong>最优子结构</strong>性质的问题。动态规划通常用于优化问题，目的是通过构建递归关系和记忆化中间结果，找到全局最优解。</p><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><p>动态规划的核心思想是将一个复杂的问题分解为若干个子问题，然后通过递推的方式逐步解决这些子问题。它的基本步骤如下：</p><ol><li><strong>定义状态</strong>：确定问题的状态，也就是用哪些变量来描述当前子问题的状态。</li><li><strong>状态转移方程</strong>：找到子问题之间的递推关系（即状态转移方程），描述如何从已解决的子问题得到当前问题的解。</li><li><strong>边界条件</strong>：确定初始状态的值，通常是最小规模的问题的解。</li><li><strong>计算顺序</strong>：根据状态转移方程的依赖关系，从小到大计算每个子问题的解。</li></ol><p>动态规划常用来解决最优化问题，如最短路径问题、最大子序列和问题、背包问题等。</p><h4 id="动态规划的特性"><a href="#动态规划的特性" class="headerlink" title="动态规划的特性"></a>动态规划的特性</h4><ol><li><p><strong>重叠子问题</strong>：动态规划问题通常具有重叠子问题，即原问题可以分解成若干个相同的子问题。不同的子问题可能会在递归求解中被重复计算。如果使用简单的递归方法，会导致大量的重复计算，因此通过记忆化技术（如数组或表）存储子问题的解，可以避免重复计算。</p></li><li><p><strong>最优子结构</strong>：如果问题的最优解可以由其子问题的最优解构造而成，称为最优子结构。例如，求解最短路径时，如果最短路径经过某个点，那么从该点到终点的子路径也一定是最短路径。</p></li></ol><h4 id="动态规划的两种实现方式"><a href="#动态规划的两种实现方式" class="headerlink" title="动态规划的两种实现方式"></a>动态规划的两种实现方式</h4><ol><li><p><strong>自顶向下（记忆化搜索）</strong>：使用递归的方式自顶向下解决问题，同时将子问题的解存储在数组或哈希表中（称为“记忆化”），以便下次遇到相同的子问题时直接返回之前计算的结果，而不是重新计算。</p></li><li><p><strong>自底向上（迭代法）</strong>：先解决最简单的子问题，然后通过迭代的方式解决规模逐渐增大的问题。自底向上通常表现为使用一个数组或表，按照状态转移方程逐步填充表中的值。</p></li></ol><h4 id="动态规划的经典例题"><a href="#动态规划的经典例题" class="headerlink" title="动态规划的经典例题"></a>动态规划的经典例题</h4><h5 id="1-斐波那契数列"><a href="#1-斐波那契数列" class="headerlink" title="1. 斐波那契数列"></a>1. 斐波那契数列</h5><p>这是动态规划最简单的例子，斐波那契数列的递归公式为：<br>[<br>F(n) &#x3D; F(n-1) + F(n-2)<br>]<br>使用动态规划，可以避免递归的重复计算。</p><p><strong>状态定义</strong>：令 <code>dp[i]</code> 表示斐波那契数列第 <code>i</code> 项的值。</p><p><strong>状态转移方程</strong>：<br>[<br>dp[i] &#x3D; dp[i-1] + dp[i-2]<br>]</p><p><strong>边界条件</strong>：<br>[<br>dp[0] &#x3D; 0, \ dp[1] &#x3D; 1<br>]</p><p><strong>自底向上代码实现</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    dp = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">0</span>], dp[<span class="number">1</span>] = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure><h5 id="2-背包问题"><a href="#2-背包问题" class="headerlink" title="2. 背包问题"></a>2. 背包问题</h5><p>背包问题是经典的动态规划问题，描述如下：有一个背包容量为 <code>W</code>，有 <code>n</code> 个物品，每个物品有重量 <code>w_i</code> 和价值 <code>v_i</code>，问如何选择物品装入背包，使得装入背包的物品总价值最大。</p><p><strong>状态定义</strong>：<code>dp[i][j]</code> 表示前 <code>i</code> 个物品在背包容量为 <code>j</code> 时的最大价值。</p><p><strong>状态转移方程</strong>：<br>[<br>dp[i][j] &#x3D; \max(dp[i-1][j], dp[i-1][j-w_i] + v_i)<br>]<br>如果不选择第 <code>i</code> 个物品，则 <code>dp[i][j] = dp[i-1][j]</code>；如果选择，则 <code>dp[i][j] = dp[i-1][j-w_i] + v_i</code>。</p><p><strong>边界条件</strong>：<code>dp[0][j] = 0</code>（没有物品时最大价值为0）。</p><h5 id="3-最长公共子序列（LCS）"><a href="#3-最长公共子序列（LCS）" class="headerlink" title="3. 最长公共子序列（LCS）"></a>3. 最长公共子序列（LCS）</h5><p>给定两个序列，求它们的最长公共子序列。其状态转移方程为：</p><p>[<br>dp[i][j] &#x3D;<br>\begin{cases}<br>dp[i-1][j-1] + 1, &amp; \text{if } s1[i] &#x3D; s2[j] \<br>\max(dp[i-1][j], dp[i][j-1]), &amp; \text{if } s1[i] \neq s2[j]<br>\end{cases}<br>]</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>动态规划通过记忆化子问题的解，可以极大地提高算法的效率。掌握动态规划的关键在于能识别问题的<strong>重叠子问题</strong>和<strong>最优子结构</strong>，并合理地定义状态和状态转移方程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;动态规划是一种将复杂问题分解为更小的子问题并通过缓存子问题的解来避免重复计算的算法设计方法。它适用于具有&lt;strong&gt;重叠子问题&lt;/strong&gt;和&lt;strong&gt;最优子结构&lt;/strong&gt;性质的问题。动态规划通常用于优化问题，目的是通过构建递归关系和记忆化中间结果，找</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tomcat和nginx总结</title>
    <link href="https://promptonce.github.io/2024/10/20/nginx%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/20/nginx%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-20T10:13:54.000Z</published>
    <updated>2024-10-20T11:31:03.667Z</updated>
    
    <content type="html"><![CDATA[<p>nginx是一个高效的静态内容 Web 服务器，同时也是反向代理服务器，擅长处理静态资源、负载均衡和反向代理功能。</p><h2 id="vue发布的网站非根域名刷新404的错误"><a href="#vue发布的网站非根域名刷新404的错误" class="headerlink" title="vue发布的网站非根域名刷新404的错误"></a>vue发布的网站非根域名刷新404的错误</h2><p>*<em>解决方法：配置一个重定向规则，使得所有请求都指向Vue应用的入口文件 <code>index.html</code>。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name your_domain.com;  <span class="comment"># 替换为你的域名或IP地址</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /path/to/your/vue/app;  <span class="comment"># Vue应用打包后的文件存放目录</span></span><br><span class="line">        try_files $uri $uri/ /index.html;  <span class="comment"># 如果找不到文件，则返回index.html</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    index index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nginx是一个高效的静态内容 Web 服务器，同时也是反向代理服务器，擅长处理静态资源、负载均衡和反向代理功能。&lt;/p&gt;
&lt;h2 id=&quot;vue发布的网站非根域名刷新404的错误&quot;&gt;&lt;a href=&quot;#vue发布的网站非根域名刷新404的错误&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript 标记清除法总结</title>
    <link href="https://promptonce.github.io/2024/10/17/JavaScript-%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/17/JavaScript-%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-17T15:48:35.000Z</published>
    <updated>2024-10-17T16:22:47.720Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalVariable = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;I&#x27;m a global variable&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="string">&quot;codereasy&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">globalVariable</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">xiaoming</span>);</span><br><span class="line"><span class="comment">//(1) &#123;name: &quot;I&#x27;m a global variable&quot;&#125;</span></span><br><span class="line"><span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量可以被视为根， 因此他们是可达的</span></span><br><span class="line"><span class="keyword">let</span> globalVariable = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;I&#x27;m a global variable&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的参数和内部变量也是可达的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">someFunction</span>(<span class="params">someArgument</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> functionVariable = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;I&#x27;m a variable inside of a function&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(someArgument, functionVariable)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">someFunction</span>(globalVariable);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objectA = &#123;</span><br><span class="line"><span class="attr">objectProperty</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;I&#x27;m a property of an object&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objectA.<span class="property">objectProperty</span>);</span><br><span class="line"><span class="comment">// (1) &#123;name: &quot;I&#x27;m a global variable&quot;&#125;  </span></span><br><span class="line"><span class="comment">// (1) &#123;name: &quot;I&#x27;m a variable inside of a f...&#125;</span></span><br></pre></td></tr></table></figure><p>优点：标记清除法解决了循环依赖的问题<br>缺点：标记清除法会出现内存碎片</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>flask总结</title>
    <link href="https://promptonce.github.io/2024/10/17/flask%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/17/flask%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-16T16:56:07.000Z</published>
    <updated>2024-10-17T16:24:37.997Z</updated>
    
    <content type="html"><![CDATA[<p>服务器运行flask绑定所有端口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask run --host <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;服务器运行flask绑定所有端口&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript垃圾回收-引用计数法</title>
    <link href="https://promptonce.github.io/2024/10/16/JavaScript%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E6%B3%95/"/>
    <id>https://promptonce.github.io/2024/10/16/JavaScript%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E6%B3%95/</id>
    <published>2024-10-16T09:34:55.000Z</published>
    <updated>2024-10-16T09:37:08.517Z</updated>
    
    <content type="html"><![CDATA[<p>引用计数法进行垃圾回收内存泄露的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> objectA = &#123;<span class="attr">name</span>: <span class="string">&quot;Object A&quot;</span>&#125;;</span><br><span class="line">  <span class="keyword">let</span> objectB = &#123;<span class="attr">name</span>: <span class="string">&quot;Object B&quot;</span>&#125;;</span><br><span class="line">  objectA.<span class="property">otherObject</span> = objectB;</span><br><span class="line">  objectB.<span class="property">otherObject</span> = objectA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;引用计数法进行垃圾回收内存泄露的例子&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>this绑定相关面试题</title>
    <link href="https://promptonce.github.io/2024/10/16/this%E7%BB%91%E5%AE%9A%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://promptonce.github.io/2024/10/16/this%E7%BB%91%E5%AE%9A%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2024-10-16T09:06:22.000Z</published>
    <updated>2024-10-16T09:23:00.061Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span>)();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;全局window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;person&quot;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> fun = person.<span class="property">sayName</span>;</span><br><span class="line">  <span class="title function_">fun</span>();<span class="comment">// 全局window</span></span><br><span class="line">  person.<span class="title function_">sayName</span>(); <span class="comment">//person</span></span><br><span class="line">  (b = person.<span class="property">sayName</span>)();<span class="comment">// 全局window对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>双指针</title>
    <link href="https://promptonce.github.io/2024/10/16/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <id>https://promptonce.github.io/2024/10/16/%E5%8F%8C%E6%8C%87%E9%92%88/</id>
    <published>2024-10-16T06:48:09.000Z</published>
    <updated>2024-10-16T07:12:25.248Z</updated>
    
    <content type="html"><![CDATA[<p>有序并不是双指针使用的必要前提，但在某些情况下，<strong>有序数组</strong>确实可以帮助我们充分发挥双指针的优势，特别是在减少搜索空间和提高效率方面。双指针是一种灵活的算法技巧，可以根据具体场景应用于有序或无序的场景。下面将详细讨论。</p><h3 id="1-有序数组中的双指针"><a href="#1-有序数组中的双指针" class="headerlink" title="1. 有序数组中的双指针"></a>1. <strong>有序数组中的双指针</strong></h3><p>在有序数组或序列中使用双指针，可以利用排序的特性来快速定位解。这类问题通常依赖于数据的有序性来实现更高效的算法。例如，前面提到的 <strong>“Two Sum II”</strong> 问题，因为数组是有序的，双指针可以通过移动指针快速缩小搜索范围。如果数组是无序的，那么双指针这种方式在查找和筛选时会失去优势。</p><ul><li><strong>例子</strong>：<ul><li><strong>查找两数之和问题</strong>：利用双指针，从两端向中间靠拢，根据和与目标值的比较，决定移动哪一个指针。</li></ul></li></ul><h3 id="2-无序数组中的双指针"><a href="#2-无序数组中的双指针" class="headerlink" title="2. 无序数组中的双指针"></a>2. <strong>无序数组中的双指针</strong></h3><p>虽然有序数组能让双指针更高效，但双指针同样可以在<strong>无序数组</strong>中使用。常见的应用场景包括处理<strong>特定条件的子数组</strong>、<strong>滑动窗口问题</strong>、<strong>快慢指针遍历链表</strong>等。这些问题不依赖有序性，而是基于特定的逻辑条件来移动指针。</p><ul><li><strong>例子</strong>：<ul><li><strong>快慢指针（Floyd’s Tortoise and Hare Algorithm）</strong>：该算法常用于检测链表中的环，并且链表不需要有序。一个指针每次走一步（慢指针），另一个指针每次走两步（快指针），最终两个指针会相遇。</li><li><strong>滑动窗口</strong>：在处理动态长度的子数组问题时，双指针可以用来动态调整窗口的大小，维护窗口的边界。</li></ul></li></ul><h3 id="3-滑动窗口问题"><a href="#3-滑动窗口问题" class="headerlink" title="3. 滑动窗口问题"></a>3. <strong>滑动窗口问题</strong></h3><p>滑动窗口（Sliding Window）是一类经典的双指针应用，通常用于处理<strong>无序数组</strong>或字符串。在这些问题中，一个指针（左指针）固定窗口的起点，另一个指针（右指针）扩展窗口或收缩窗口，直到满足某个条件。</p><ul><li><strong>例子</strong>：<ul><li><strong>最长子数组问题</strong>：寻找一个数组中满足某些条件的最长子数组。双指针可以用来动态调整子数组的起始和结束位置，以优化解的查找。</li></ul></li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>双指针并不依赖数据有序与否，而是依赖问题的具体要求和性质。在有序数组中，双指针通常可以更加高效地解决问题，因为排序提供了一个明确的规则（例如大小关系）来指导指针的移动；在无序数组或其他数据结构中，双指针也可以用于解决子数组、链表问题等。主要的前提是问题能够通过调整两个位置来逐步缩小搜索范围或满足特定条件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有序并不是双指针使用的必要前提，但在某些情况下，&lt;strong&gt;有序数组&lt;/strong&gt;确实可以帮助我们充分发挥双指针的优势，特别是在减少搜索空间和提高效率方面。双指针是一种灵活的算法技巧，可以根据具体场景应用于有序或无序的场景。下面将详细讨论。&lt;/p&gt;
&lt;h3 id=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript正则表达式</title>
    <link href="https://promptonce.github.io/2024/10/16/JavaScript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://promptonce.github.io/2024/10/16/JavaScript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2024-10-16T06:36:10.000Z</published>
    <updated>2024-10-16T06:36:50.776Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isCharacter</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/[a-zA-Z0-9]/</span>.<span class="title function_">test</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>npm配置代理</title>
    <link href="https://promptonce.github.io/2024/10/16/npm%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <id>https://promptonce.github.io/2024/10/16/npm%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</id>
    <published>2024-10-15T17:35:00.000Z</published>
    <updated>2024-10-15T17:36:58.078Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">delete</span> proxy</span><br><span class="line">npm config set proxy <span class="attr">http</span>:<span class="comment">//proxy-server:port</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>显示绑定、隐式绑定、new绑定的优点</title>
    <link href="https://promptonce.github.io/2024/10/15/%E6%98%BE%E7%A4%BA%E7%BB%91%E5%AE%9A%E3%80%81%E9%9A%90%E5%BC%8F%E7%BB%91%E5%AE%9A%E3%80%81new%E7%BB%91%E5%AE%9A%E7%9A%84%E4%BC%98%E7%82%B9/"/>
    <id>https://promptonce.github.io/2024/10/15/%E6%98%BE%E7%A4%BA%E7%BB%91%E5%AE%9A%E3%80%81%E9%9A%90%E5%BC%8F%E7%BB%91%E5%AE%9A%E3%80%81new%E7%BB%91%E5%AE%9A%E7%9A%84%E4%BC%98%E7%82%B9/</id>
    <published>2024-10-15T15:53:02.000Z</published>
    <updated>2024-10-15T16:09:45.746Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式绑定</span></span><br><span class="line">obj1.<span class="title function_">foo</span>(); <span class="comment">// obj1</span></span><br><span class="line">obj2.<span class="title function_">foo</span>(); <span class="comment">// obj2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式绑定和显式绑定</span></span><br><span class="line">obj1.<span class="property">foo</span>.<span class="title function_">call</span>(obj2); <span class="comment">//obj2, 说明显式绑定优先级更高</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>new关键字绑定</title>
    <link href="https://promptonce.github.io/2024/10/15/new%E5%85%B3%E9%94%AE%E5%AD%97%E7%BB%91%E5%AE%9A/"/>
    <id>https://promptonce.github.io/2024/10/15/new%E5%85%B3%E9%94%AE%E5%AD%97%E7%BB%91%E5%AE%9A/</id>
    <published>2024-10-15T15:06:50.000Z</published>
    <updated>2024-10-15T15:22:09.111Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// Student &#123;&#125;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// Student &#123;name : &quot;codereasy&quot;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过new关键字创建一个新对象的步骤是什么、构造函数是如何创建新对象的？</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;codereasy&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaoming);</span><br></pre></td></tr></table></figure><p>在构造函数中添加return，如果return的是对象，则直接返回该对象，如果return的是基本类型，则return语句无效，仍然返回我们创建的新对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>显式绑定</title>
    <link href="https://promptonce.github.io/2024/10/15/%E6%98%BE%E5%BC%8F%E7%BB%91%E5%AE%9A/"/>
    <id>https://promptonce.github.io/2024/10/15/%E6%98%BE%E5%BC%8F%E7%BB%91%E5%AE%9A/</id>
    <published>2024-10-15T08:34:18.000Z</published>
    <updated>2024-10-15T13:14:48.119Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="variable language_">window</span>); <span class="comment">// window</span></span><br><span class="line">foo.<span class="title function_">call</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;codereasy&quot;</span>&#125;); <span class="comment">// &#123;name: &quot;codereasy&quot;&#125;</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="number">666</span>); <span class="comment">// Object( empty )</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;codereasy&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">// obj对象</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>隐式绑定</title>
    <link href="https://promptonce.github.io/2024/10/15/%E9%9A%90%E5%BC%8F%E7%BB%91%E5%AE%9A/"/>
    <id>https://promptonce.github.io/2024/10/15/%E9%9A%90%E5%BC%8F%E7%BB%91%E5%AE%9A/</id>
    <published>2024-10-15T08:11:12.000Z</published>
    <updated>2024-10-15T08:16:13.132Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span>,</span><br><span class="line">  <span class="attr">obj1</span>: obj1,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">obj1</span>.<span class="title function_">foo</span>();<span class="comment">// &#123;name: &quot;obj1&quot;, foo: foo()&#125;</span></span><br></pre></td></tr></table></figure><p>谁直接调用foo（换而言之，谁离foo更近），那么foo()中的this就指向谁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>this在运行时绑定还是编译时绑定</title>
    <link href="https://promptonce.github.io/2024/10/15/this%E5%9C%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%BB%91%E5%AE%9A%E8%BF%98%E6%98%AF%E7%BC%96%E8%AF%91%E6%97%B6%E7%BB%91%E5%AE%9A/"/>
    <id>https://promptonce.github.io/2024/10/15/this%E5%9C%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%BB%91%E5%AE%9A%E8%BF%98%E6%98%AF%E7%BC%96%E8%AF%91%E6%97%B6%E7%BB%91%E5%AE%9A/</id>
    <published>2024-10-15T07:49:31.000Z</published>
    <updated>2024-10-15T08:05:17.065Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.调用方式一： 直接调用</span></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方式二：将foo放到一个对象中，再调用</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;codereasy&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">foo</span>();<span class="comment">// object对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.调用方式三： 通过call或者apply调用</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&quot;ctgu&quot;</span>);<span class="comment">// string &#123;ctgu对象&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript寄生组合继承</title>
    <link href="https://promptonce.github.io/2024/10/14/JavaScript%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF/"/>
    <id>https://promptonce.github.io/2024/10/14/JavaScript%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF/</id>
    <published>2024-10-14T05:34:20.000Z</published>
    <updated>2024-10-14T05:49:10.115Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="string">&quot;我是父类prototype上的属性&quot;</span>;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个没有实例方法的父类实例作为子类的原型</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// 修复构造函数的指向</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个Child实例</span></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">sayHello</span> === child2.<span class="property">sayHello</span>);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parentObj = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parentObj.<span class="property">a</span>);<span class="comment">//我是父类prototype上的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">a</span>)<span class="comment">//我是父类prototype上的属性</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="string">&quot;我是父类prototype上的属性&quot;</span>;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">childFunction</span> = <span class="function">()=&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是child方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个没有实例方法的父类实例作为子类的原型</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// 修复构造函数的指向</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个Child实例</span></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">child1.<span class="title function_">childFunction</span>();</span><br><span class="line"><span class="comment">// TypeError: child1.childFunction is not a function</span></span><br><span class="line"><span class="comment">//     at &lt;anonymous&gt;:25:8</span></span><br><span class="line"><span class="comment">//     at mn (&lt;anonymous&gt;:16:5455)</span></span><br></pre></td></tr></table></figure><p>优点：<br>1 ，原型属性不会被共享<br>2 ，可以继承父类的原型链上的属性和方法<br>3 ．只调用了 1 次 Parent(), 因此，它不会在 Child 的prototype 上添加 Parent 的属性和方法。<br>缺点：<br> Child.prototype的原始属性和方法会丢失。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript组合继承</title>
    <link href="https://promptonce.github.io/2024/10/14/JavaScript%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF/"/>
    <id>https://promptonce.github.io/2024/10/14/JavaScript%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF/</id>
    <published>2024-10-14T05:26:21.000Z</published>
    <updated>2024-10-14T05:32:14.372Z</updated>
    
    <content type="html"><![CDATA[<hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="string">&quot;我是父类prototype上的属性&quot;</span>;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个Child实例</span></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">sayHello</span> === child2.<span class="property">sayHello</span>);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parentObj = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parentObj.<span class="property">a</span>);<span class="comment">//我是父类prototype上的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">a</span>)<span class="comment">//我是父类prototype上的属性</span></span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>原型属性不会被共享。</li><li>可以继承父类的原型链上的属性和方法。<br>缺点：</li><li>调用了 2 次 Parent()。</li><li>它在 child 的 prototype 上添加了父类的属性和方法。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript构造函数继承</title>
    <link href="https://promptonce.github.io/2024/10/14/JavaScript%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF/"/>
    <id>https://promptonce.github.io/2024/10/14/JavaScript%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF/</id>
    <published>2024-10-14T05:11:32.000Z</published>
    <updated>2024-10-14T05:22:54.129Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="string">&quot;我是父类prototype上的属性&quot;</span>;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个Child实例</span></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">sayHello</span> === child2.<span class="property">sayHello</span>);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parentObj = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parentObj.<span class="property">a</span>);<span class="comment">//我是父类prototype上的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">a</span>)<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>优点：这种继承方式的好处是，原型属性不会被共享。<br>缺点：它不能继承父类prototype上的属性</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>原型链继承</title>
    <link href="https://promptonce.github.io/2024/10/14/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/"/>
    <id>https://promptonce.github.io/2024/10/14/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/</id>
    <published>2024-10-14T04:58:43.000Z</published>
    <updated>2024-10-14T05:18:47.604Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)  &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;child&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="title function_">getName</span>());<span class="comment">// &quot;child&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承父类，这里是关键，实现原型链继承</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化子类</span></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> <span class="title function_">child</span>();</span><br><span class="line"></span><br><span class="line">child1.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">arr</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child2.<span class="property">arr</span>)</span><br></pre></td></tr></table></figure><p>原型链继承的一个主要问题是包含引用类型值的原型属性会被所有实例共享。换而言之，如果一个实例改变了该属性，那么其他实例的该属性也会被改变</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
</feed>
