<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PromptOnce</title>
  
  
  <link href="https://promptonce.github.io/atom.xml" rel="self"/>
  
  <link href="https://promptonce.github.io/"/>
  <updated>2024-10-13T05:54:22.305Z</updated>
  <id>https://promptonce.github.io/</id>
  
  <author>
    <name>penggan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深拷贝的实现方式以及优缺点分析</title>
    <link href="https://promptonce.github.io/2024/10/13/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9%E5%88%86%E6%9E%90/"/>
    <id>https://promptonce.github.io/2024/10/13/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9%E5%88%86%E6%9E%90/</id>
    <published>2024-10-13T05:29:20.000Z</published>
    <updated>2024-10-13T05:54:22.305Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">    <span class="attr">country</span>: <span class="string">&quot;USA&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deepCopy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deepCopy);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改原对象</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line">obj.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&quot;San Francisco&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deepCopy);</span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  name: &#x27;John&#x27;,</span></span><br><span class="line"><span class="comment">//  age: 30,</span></span><br><span class="line"><span class="comment">//  address: &#123; city: &#x27;New York&#x27;, country: &#x27;USA&#x27; &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  name: &#x27;Alice&#x27;,</span></span><br><span class="line"><span class="comment">//  age: 30,</span></span><br><span class="line"><span class="comment">//  address: &#123; city: &#x27;San Francisco&#x27;, country: &#x27;USA&#x27; &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  name: &#x27;John&#x27;,</span></span><br><span class="line"><span class="comment">//  age: 30,</span></span><br><span class="line"><span class="comment">//  address: &#123; city: &#x27;New York&#x27;, country: &#x27;USA&#x27; &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><ol><li>JSON.stringify无法拷贝函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj);</span><br><span class="line"><span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure></li><li>JSON.stringify无法拷贝特殊对象，如Date、正则表达式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">  <span class="attr">regex</span>: <span class="string">&#x27;/test/&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;旧对象&quot;</span>, obj.<span class="property">date</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;旧对象&quot;</span>, obj.<span class="property">regex</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新对象&quot;</span>, newObj.<span class="property">date</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新对象&quot;</span>, newObj.<span class="property">regex</span>);</span><br><span class="line"><span class="comment">//旧对象 2024-10-13T05:42:50.531Z</span></span><br><span class="line"><span class="comment">//旧对象 /test/</span></span><br><span class="line"><span class="comment">//新对象 2024-10-13T05:42:50.531Z（输出字符串，而不是Date对象）</span></span><br><span class="line"><span class="comment">//新对象 /test/（输出空对象，而不是RegExp对象）</span></span><br></pre></td></tr></table></figure></li><li>JSON.stringify不会拷贝原型链上的属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> protoObj = &#123;<span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(protoObj);</span><br><span class="line">obj.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">obj.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">c</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">c</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li>JSON.stringify会忽略symbol和undefined属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;test&#x27;</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj);</span><br><span class="line"><span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker总结</title>
    <link href="https://promptonce.github.io/2024/10/12/docker%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/12/docker%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-12T15:18:58.000Z</published>
    <updated>2024-10-12T15:52:25.350Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker容器：结合虚拟机隔离与高效资源利用的最佳实践"><a href="#Docker容器：结合虚拟机隔离与高效资源利用的最佳实践" class="headerlink" title="Docker容器：结合虚拟机隔离与高效资源利用的最佳实践"></a><strong>Docker容器：结合虚拟机隔离与高效资源利用的最佳实践</strong></h3><p>在现代软件开发和部署中，容器技术正逐渐取代传统的虚拟机解决方案。Docker作为其中最流行的容器平台，凭借其高效的资源利用和灵活的环境隔离性，成为了开发者和运维人员的必备工具。那么，Docker容器到底是如何在保持隔离的同时提升效率的呢？它真的能取代虚拟机吗？让我们深入探讨。</p><hr><h3 id="虚拟机与Docker的区别"><a href="#虚拟机与Docker的区别" class="headerlink" title="虚拟机与Docker的区别"></a><strong>虚拟机与Docker的区别</strong></h3><h4 id="1-虚拟机的隔离性与开销"><a href="#1-虚拟机的隔离性与开销" class="headerlink" title="1. 虚拟机的隔离性与开销"></a>1. <strong>虚拟机的隔离性与开销</strong></h4><p>虚拟机技术通过虚拟化，将一台物理服务器分割成多个虚拟的“机器”，每个虚拟机都运行在独立的操作系统上，包括完整的内核和用户空间。这种方式提供了非常强的隔离性：每个虚拟机之间完全独立，宛如多台真实的物理服务器。</p><p>但是，这种隔离的代价是<strong>较高的资源开销</strong>。每个虚拟机都需要加载自己的操作系统内核，这不仅使得启动时间长，而且消耗大量的计算、存储和内存资源。这对于一些场景（如微服务架构、持续集成&#x2F;持续部署）来说，显得过于笨重和低效。</p><h4 id="2-Docker的轻量级容器"><a href="#2-Docker的轻量级容器" class="headerlink" title="2. Docker的轻量级容器"></a>2. <strong>Docker的轻量级容器</strong></h4><p>Docker容器则提供了一种更高效的方式：<strong>容器共享宿主机的操作系统内核</strong>，不再为每个实例加载独立的操作系统。每个Docker容器运行在一个轻量级的、独立的用户空间中，它通过Docker镜像定义应用程序和依赖库，保持了独立的文件系统和运行环境。</p><p>这意味着Docker容器能够像虚拟机一样提供隔离效果，但<strong>不需要虚拟化整个操作系统内核</strong>。这极大地降低了资源消耗，使容器的启动和停止非常迅速，可以在几秒内完成。</p><hr><h3 id="Docker容器的核心优势"><a href="#Docker容器的核心优势" class="headerlink" title="Docker容器的核心优势"></a><strong>Docker容器的核心优势</strong></h3><h4 id="1-独立文件系统与应用环境隔离"><a href="#1-独立文件系统与应用环境隔离" class="headerlink" title="1. 独立文件系统与应用环境隔离"></a>1. <strong>独立文件系统与应用环境隔离</strong></h4><p>Docker容器提供了一个独立的文件系统，应用程序及其依赖库都封装在镜像里。即使宿主机环境不同，容器内的应用运行效果也始终如一。这种用户空间的隔离让开发者可以放心地在不同环境中部署应用，而不必担心系统配置或依赖冲突的问题。</p><h4 id="2-共享宿主机内核"><a href="#2-共享宿主机内核" class="headerlink" title="2. 共享宿主机内核"></a>2. <strong>共享宿主机内核</strong></h4><p>Docker容器的轻量化设计源于其<strong>共享宿主机的操作系统内核</strong>。容器不需要加载自己的内核，而是直接利用宿主机的内核进行系统调用和资源管理。与虚拟机需要额外的硬件虚拟化和完整的操作系统开销不同，容器直接与宿主系统交互，这让它更加高效。</p><h4 id="3-启动迅速，资源开销小"><a href="#3-启动迅速，资源开销小" class="headerlink" title="3. 启动迅速，资源开销小"></a>3. <strong>启动迅速，资源开销小</strong></h4><p>由于容器不需要启动一个完整的操作系统，它的启动时间非常短，可以在几秒钟内完成。相比虚拟机需要几分钟才能完全启动，Docker容器更加适合频繁的启动和销毁操作，这对于微服务架构和自动化CI&#x2F;CD管道尤为重要。</p><h4 id="4-隔离与安全性"><a href="#4-隔离与安全性" class="headerlink" title="4. 隔离与安全性"></a>4. <strong>隔离与安全性</strong></h4><p>虽然容器共享内核，但通过Linux的命名空间（namespaces）和控制组（cgroups）机制，Docker实现了资源、进程和网络等方面的隔离，保证了容器之间的独立性和安全性。虽然这种隔离性不如虚拟机那么彻底，但在大多数应用场景下，已经足够安全和高效。</p><hr><h3 id="Docker是否能取代虚拟机？"><a href="#Docker是否能取代虚拟机？" class="headerlink" title="Docker是否能取代虚拟机？"></a><strong>Docker是否能取代虚拟机？</strong></h3><p>从上面的分析可以看出，<strong>Docker并不是虚拟机的完全替代品</strong>，但它在许多场景下具有更大的优势：</p><ul><li><strong>高效资源利用</strong>：Docker容器通过共享内核，避免了虚拟机加载整个操作系统的资源开销，显得更加轻量化。</li><li><strong>灵活部署和扩展</strong>：容器启动迅速，支持快速扩容和缩容，非常适合微服务架构和大规模的分布式系统。</li><li><strong>环境一致性</strong>：通过容器化，开发、测试和生产环境可以保持高度一致，解决了传统部署中的“环境不一致”问题。</li></ul><p>但是，Docker并不完全替代虚拟机，尤其是在某些<strong>高隔离</strong>和<strong>硬件依赖性高</strong>的场景中，虚拟机依然有其独特的优势。例如，虚拟机可以在不同的内核上运行，提供更严格的安全隔离。而Docker容器由于共享宿主机的内核，隔离强度不如虚拟机，存在内核级别的安全隐患。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>Docker容器在结合虚拟机隔离优势的同时，避免了虚拟机的资源浪费。它通过共享宿主机内核，提供了一个轻量级、高效的运行环境，特别适合现代的云原生应用和微服务架构。虽然它不完全取代虚拟机，但在资源消耗、启动速度和环境一致性等方面，Docker无疑是更好的选择。</p><p>对于大多数开发者和运维人员来说，Docker已经成为部署和管理应用的标准工具。而在那些对安全隔离要求极高的场景下，虚拟机依然是不可替代的解决方案。未来的趋势可能是两者结合，既享受容器的灵活性，又兼顾虚拟机的高隔离性。</p><hr><p><strong>参考文献：</strong></p><ul><li>Docker官方文档</li><li>虚拟化与容器技术的对比分析</li></ul><p>通过合理选择和组合这两种技术，可以在不同的场景中取得最佳的性能和灵活性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Docker容器：结合虚拟机隔离与高效资源利用的最佳实践&quot;&gt;&lt;a href=&quot;#Docker容器：结合虚拟机隔离与高效资源利用的最佳实践&quot; class=&quot;headerlink&quot; title=&quot;Docker容器：结合虚拟机隔离与高效资源利用的最佳实践&quot;&gt;&lt;/a&gt;&lt;s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>让自己开发的软件产品保持latest_version_release的意义</title>
    <link href="https://promptonce.github.io/2024/10/12/%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E4%BA%A7%E5%93%81%E4%BF%9D%E6%8C%81latest-version-release%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://promptonce.github.io/2024/10/12/%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E4%BA%A7%E5%93%81%E4%BF%9D%E6%8C%81latest-version-release%E7%9A%84%E6%84%8F%E4%B9%89/</id>
    <published>2024-10-12T14:31:27.000Z</published>
    <updated>2024-10-12T14:42:45.059Z</updated>
    
    <content type="html"><![CDATA[<p>有助于不断加深自己对技术的理解<br>热启动<br>站在高位思考</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有助于不断加深自己对技术的理解&lt;br&gt;热启动&lt;br&gt;站在高位思考&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组的浅拷贝</title>
    <link href="https://promptonce.github.io/2024/10/12/%E6%95%B0%E7%BB%84%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://promptonce.github.io/2024/10/12/%E6%95%B0%E7%BB%84%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2024-10-12T06:44:35.000Z</published>
    <updated>2024-10-12T06:48:52.323Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = arr1.<span class="title function_">slice</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//[ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = arr1.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">// 左闭右开</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//[ 3 ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>].<span class="title function_">concat</span>(arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//[ 0, 1, 2, 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [].<span class="title function_">concat</span>(arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);<span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>对象的浅拷贝</title>
    <link href="https://promptonce.github.io/2024/10/12/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://promptonce.github.io/2024/10/12/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2024-10-12T06:41:36.000Z</published>
    <updated>2024-10-12T06:41:48.050Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;a : <span class="number">1</span>, b : <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;a : <span class="number">1</span>, b : <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;...obj1&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">  <span class="keyword">if</span>(obj1.<span class="title function_">hasOwnProperty</span>(key))&#123;<span class="comment">// for in 会遍历原型上的属性，所以需要判断是否为自身的属性</span></span><br><span class="line">    obj2[key] = obj1[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123; a: 1, b: 2, c: &#123; d: 4 &#125; &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  obj2[key] = obj1[key];<span class="comment">// Object.keys()只会遍历对象自身的可枚举属性，所以不需要判断是否为自身的属性</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123; a: 1, b: 2, c: &#123; d: 4 &#125; &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>深拷贝与浅拷贝的区别</title>
    <link href="https://promptonce.github.io/2024/10/12/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://promptonce.github.io/2024/10/12/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2024-10-12T06:23:00.000Z</published>
    <updated>2024-10-12T06:41:17.626Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> originalObject = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">hobbies</span>: [<span class="string">&quot;reading&quot;</span>, <span class="string">&quot;coding&quot;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浅拷贝对象</span></span><br><span class="line"><span class="keyword">const</span> shallowCopyObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, originalObject);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改拷贝对象的属性</span></span><br><span class="line">shallowCopyObj.<span class="property">name</span> = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line">shallowCopyObj.<span class="property">hobbies</span>.<span class="title function_">push</span>(<span class="string">&quot;painting&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalObject);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shallowCopyObj);</span><br><span class="line"><span class="comment">//&#123; name: &#x27;John&#x27;, age: 30, hobbies: [ &#x27;reading&#x27;, &#x27;coding&#x27;, &#x27;painting&#x27; ] &#125;</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  name: &#x27;Alice&#x27;,</span></span><br><span class="line"><span class="comment">//  age: 30,</span></span><br><span class="line"><span class="comment">//  hobbies: [ &#x27;reading&#x27;, &#x27;coding&#x27;, &#x27;painting&#x27; ]</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>如果对象的属性为引用类型或复杂类型，修改拷贝对象的属性，会影响到原对象，修改原对象的属性，也会影响到拷贝对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组索引背后隐藏了哪些类型转换？</title>
    <link href="https://promptonce.github.io/2024/10/12/%E6%95%B0%E7%BB%84%E7%B4%A2%E5%BC%95%E8%83%8C%E5%90%8E%E9%9A%90%E8%97%8F%E4%BA%86%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%9F/"/>
    <id>https://promptonce.github.io/2024/10/12/%E6%95%B0%E7%BB%84%E7%B4%A2%E5%BC%95%E8%83%8C%E5%90%8E%E9%9A%90%E8%97%8F%E4%BA%86%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%9F/</id>
    <published>2024-10-12T05:34:49.000Z</published>
    <updated>2024-10-12T05:58:55.023Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="string">&quot;0&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">0</span>]++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a[&quot;0&quot;]的输出是&#x27;</span>, a[<span class="string">&quot;0&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a[0]的输出是&#x27;</span>, a[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//a[&quot;0&quot;]的输出是 3</span></span><br><span class="line"><span class="comment">//a[0]的输出是 3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="string">&quot;5&quot;</span>]);</span><br><span class="line"><span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = [];</span><br><span class="line"><span class="keyword">let</span> key = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line">obj[key] = <span class="string">&quot;value&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;[object Object]&quot;</span>])</span><br><span class="line"><span class="comment">// value</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;promptonce&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[myFunction] = <span class="string">&quot;函数作为索引&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[myFunction]);</span><br><span class="line"><span class="comment">// 函数作为索引</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> symIndex = <span class="title class_">Symbol</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">arr[symIndex] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[symIndex]);</span><br><span class="line"><span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> symIndex = <span class="title class_">Symbol</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">arr[symIndex] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> string = symIndex.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[string]);</span><br><span class="line"><span class="comment">// Symbol(index)</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>像素总结</title>
    <link href="https://promptonce.github.io/2024/10/10/%E5%83%8F%E7%B4%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/10/%E5%83%8F%E7%B4%A0%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-10T02:24:33.000Z</published>
    <updated>2024-10-10T03:17:34.704Z</updated>
    
    <content type="html"><![CDATA[<p>512x512RGB图像可以理解为由512x512x3个逻辑上的编码,计算机来决定如何渲染到屏幕上</p><p>电子图像的PPI<br>1英寸x1英寸的电子图片在某一行取一英寸，这一英寸有多少个像素点。</p><p>打印机的DPI<br>表示打印机的信息转化能力（一英寸输出多少个像素点且不损失信息）</p><p>高ppi如果人眼离的较远，且图像较小时可能无法区分相邻像素点，从而降低人眼的信息获取质量</p><p>PPI与DPI的对应：</p><ul><li>如果这张512x512的图片被定义为1英寸x1英寸，那么它的PPI就是512。（将512x512x3的数据表示在1英寸x1英寸的空间上）</li><li>当我们把这张图片打印出来时，如果打印机的DPI也是512，那么理论上，打印出来的图像每个像素点会对应一个墨点，效果会比较理想。</li></ul><p>假设我们有一张512x512像素的照片，想要打印成一张4英寸x4英寸的照片。</p><ul><li>计算PPI： 512像素 &#x2F; 4英寸 &#x3D; 128 PPI。</li><li>选择打印机： 如果我们的打印机最大支持1200 DPI，那么我们可以将图像的尺寸调整为4英寸x4英寸，分辨率设置为128 PPI进行打印，这样可以充分利用打印机的性能。</li><li>如果打印机只有300 DPI： 那么打印出来的图像会有一些模糊，因为每个墨点要对应多个像素。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;512x512RGB图像可以理解为由512x512x3个逻辑上的编码,计算机来决定如何渲染到屏幕上&lt;/p&gt;
&lt;p&gt;电子图像的PPI&lt;br&gt;1英寸x1英寸的电子图片在某一行取一英寸，这一英寸有多少个像素点。&lt;/p&gt;
&lt;p&gt;打印机的DPI&lt;br&gt;表示打印机的信息转化能力（一英寸</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JS中判断数组的方式有哪些?</title>
    <link href="https://promptonce.github.io/2024/10/07/JS%E4%B8%AD%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B/"/>
    <id>https://promptonce.github.io/2024/10/07/JS%E4%B8%AD%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B/</id>
    <published>2024-10-07T07:18:24.000Z</published>
    <updated>2024-10-07T08:13:44.931Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;对象的类型是&quot;</span>, <span class="keyword">typeof</span> obj);<span class="comment">// 对象的类型是 object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组的类型是&quot;</span>, <span class="keyword">typeof</span> arr);<span class="comment">// 数组的类型是 object</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objType = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj);</span><br><span class="line"><span class="keyword">let</span> arrType = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;对象的类型是&quot;</span>, objType);<span class="comment">// 对象的类型是 [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组的类型是&quot;</span>, arrType);<span class="comment">// 数组的类型是 [object Array]</span></span><br></pre></td></tr></table></figure><h2 id="通过原型链判断"><a href="#通过原型链判断" class="headerlink" title="通过原型链判断"></a>通过原型链判断</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br></pre></td></tr></table></figure><h2 id="通过Array-isArray-判断"><a href="#通过Array-isArray-判断" class="headerlink" title="通过Array.isArray()判断"></a>通过Array.isArray()判断</h2><p>ES6语法，如需运行在低版本浏览器上需要使用babel转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj =[];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj));</span><br></pre></td></tr></table></figure><h2 id="通过-instanceof-判断"><a href="#通过-instanceof-判断" class="headerlink" title="通过 instanceof 判断"></a>通过 instanceof 判断</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>css提高性能的方法</title>
    <link href="https://promptonce.github.io/2024/10/07/css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://promptonce.github.io/2024/10/07/css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2024-10-07T07:00:37.000Z</published>
    <updated>2024-10-07T07:03:15.360Z</updated>
    
    <content type="html"><![CDATA[<ol><li><strong>压缩 CSS 文件</strong>：减少文件大小，去掉不必要的空格和注释，这样文件体积更小，加载速度更快。</li><li><strong>移除未使用的样式</strong>：很多时候，写了样式没用上，导致 CSS 文件臃肿，清理掉没用的部分，减少体积。</li><li><strong>合并和分割 CSS 文件</strong>：合并多个 CSS 文件减少 HTTP 请求；也可以按需加载，只在需要时加载特定页面的样式。</li><li><strong>简化选择器</strong>：选择器不要太复杂，层级太深会增加计算负担，影响性能。尽量用类选择器，少用通配符和属性选择器。</li><li><strong>避免 @import</strong>：<code>@import</code> 导入 CSS 会增加额外请求，加载速度慢。尽量用 <code>&lt;link&gt;</code> 直接引入外部文件。</li><li><strong>减少重绘和回流</strong>：避免频繁使用会引起回流的属性，比如 <code>width</code>、<code>height</code>，动画时多用 <code>transform</code> 和 <code>opacity</code> 这种对性能影响小的属性。</li><li><strong>优化字体加载</strong>：Web 字体加载会影响页面渲染速度，尽量少用字体，设置 <code>font-display: swap</code>，让文字先显示，再加载字体。</li><li><strong>使用关键 CSS</strong>：首屏显示的 CSS 放在 <code>&lt;head&gt;</code> 里，确保页面先渲染出来，剩下的样式可以延迟加载。</li><li><strong>使用现代布局方式</strong>：像 CSS Grid 和 Flexbox 这些布局方式，比传统的 float 布局性能更好、代码更简洁。</li><li><strong>利用 CSS 变量</strong>：减少重复定义，提高代码的可维护性和简洁性。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;压缩 CSS 文件&lt;/strong&gt;：减少文件大小，去掉不必要的空格和注释，这样文件体积更小，加载速度更快。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移除未使用的样式&lt;/strong&gt;：很多时候，写了样式没用上，导致 CSS 文件臃肿，清理掉没用的部分</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>缓存总结</title>
    <link href="https://promptonce.github.io/2024/10/07/%E7%BC%93%E5%AD%98%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/07/%E7%BC%93%E5%AD%98%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-07T06:46:40.000Z</published>
    <updated>2024-10-07T06:47:45.188Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>强缓存</strong>就是在规定的时间内，浏览器直接从本地缓存中拿数据，不需要向服务器发送请求。这样，页面加载会更快。强缓存一般通过设置 <code>Expires</code> 或 <code>Cache-Control</code> 来控制缓存时间。</p></li><li><p><strong>协商缓存</strong>则是浏览器会先向服务器询问，之前缓存的内容有没有更新。如果服务器确认没有更新，浏览器继续使用缓存数据。如果内容有变化，服务器会返回新的资源。协商缓存的机制常见于 <code>Last-Modified</code> 和 <code>ETag</code> 这两个头信息。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;强缓存&lt;/strong&gt;就是在规定的时间内，浏览器直接从本地缓存中拿数据，不需要向服务器发送请求。这样，页面加载会更快。强缓存一般通过设置 &lt;code&gt;Expires&lt;/code&gt; 或 &lt;code&gt;Cache-Control&lt;/code&gt; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>进制总结</title>
    <link href="https://promptonce.github.io/2024/10/06/%E8%BF%9B%E5%88%B6%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/06/%E8%BF%9B%E5%88%B6%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-06T15:30:20.000Z</published>
    <updated>2024-10-06T15:32:06.455Z</updated>
    
    <content type="html"><![CDATA[<p>进制（Number Base）是表示数值的方式之一，用不同的数字和符号来表示不同的数值。最常见的进制有二进制、十进制、八进制和十六进制等。接下来，详细介绍这些不同的进制及它们之间的转换。</p><h3 id="1-什么是进制？"><a href="#1-什么是进制？" class="headerlink" title="1. 什么是进制？"></a>1. 什么是进制？</h3><p>进制是指用多少个不同的符号来表示一个数值的系统。例如，<strong>十进制</strong>使用0到9共十个符号；而<strong>二进制</strong>使用0和1两个符号。因此，”进制”就是表示数值的基本符号种类的数量。</p><h3 id="2-常见进制及其特点"><a href="#2-常见进制及其特点" class="headerlink" title="2. 常见进制及其特点"></a>2. 常见进制及其特点</h3><ol><li><p><strong>二进制（Binary，基数为2）</strong></p><ul><li>符号：0, 1</li><li>二进制的每一位只表示0或1。</li><li>常用于计算机和数字电路，因为电子元件只有开（1）或关（0）的状态。</li><li>例如，二进制数 <code>101</code> 表示十进制中的数字 5（从右到左依次表示 ( 1 \times 2^2 + 0 \times 2^1 + 1 \times 2^0 )）。</li></ul></li><li><p><strong>十进制（Decimal，基数为10）</strong></p><ul><li>符号：0, 1, 2, 3, 4, 5, 6, 7, 8, 9</li><li>是我们日常生活中最常用的进制。</li><li>例如，数字 <code>123</code> 表示 ( 1 \times 10^2 + 2 \times 10^1 + 3 \times 10^0 &#x3D; 123 )。</li></ul></li><li><p><strong>八进制（Octal，基数为8）</strong></p><ul><li>符号：0, 1, 2, 3, 4, 5, 6, 7</li><li>每一位表示8的幂，常用于计算机中早期的一些操作系统和硬件。</li><li>例如，八进制数 <code>17</code> 表示十进制中的数字 15（从右到左依次表示 ( 1 \times 8^1 + 7 \times 8^0 &#x3D; 15 )）。</li></ul></li><li><p><strong>十六进制（Hexadecimal，基数为16）</strong></p><ul><li>符号：0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F</li><li>用数字0-9和字母A-F表示，其中A表示10，B表示11，依此类推到F表示15。</li><li>十六进制常用于计算机编程，因为它可以简洁地表示二进制数。1个十六进制位可以表示4个二进制位（如<code>F</code>表示<code>1111</code>）。</li><li>例如，十六进制数 <code>1A</code> 表示十进制中的数字 26（从右到左依次表示 ( 1 \times 16^1 + 10 \times 16^0 &#x3D; 26 )）。</li></ul></li></ol><h3 id="3-进制转换"><a href="#3-进制转换" class="headerlink" title="3. 进制转换"></a>3. 进制转换</h3><ul><li><p><strong>二进制到十进制</strong></p><ul><li>方法：按位展开成2的幂次方求和。</li><li>例如：二进制 <code>1101</code> 转换为十进制就是 ( 1 \times 2^3 + 1 \times 2^2 + 0 \times 2^1 + 1 \times 2^0 &#x3D; 13 )。</li></ul></li><li><p><strong>十进制到二进制</strong></p><ul><li>方法：不断除以2，记录余数，然后逆序排列余数。</li><li>例如：十进制 <code>13</code> 转换为二进制就是：<ul><li>( 13 \div 2 &#x3D; 6 ) 余 1</li><li>( 6 \div 2 &#x3D; 3 ) 余 0</li><li>( 3 \div 2 &#x3D; 1 ) 余 1</li><li>( 1 \div 2 &#x3D; 0 ) 余 1</li><li>结果逆序为 <code>1101</code>。</li></ul></li></ul></li><li><p><strong>十进制到八进制</strong></p><ul><li>方法：不断除以8，记录余数，然后逆序排列余数。</li><li>例如：十进制 <code>64</code> 转换为八进制就是：<ul><li>( 64 \div 8 &#x3D; 8 ) 余 0</li><li>( 8 \div 8 &#x3D; 1 ) 余 0</li><li>( 1 \div 8 &#x3D; 0 ) 余 1</li><li>结果逆序为 <code>100</code>。</li></ul></li></ul></li><li><p><strong>十进制到十六进制</strong></p><ul><li>方法：不断除以16，记录余数（如果余数大于9，就用对应的字母），然后逆序排列余数。</li><li>例如：十进制 <code>26</code> 转换为十六进制就是：<ul><li>( 26 \div 16 &#x3D; 1 ) 余 10（即 A）</li><li>( 1 \div 16 &#x3D; 0 ) 余 1</li><li>结果逆序为 <code>1A</code>。</li></ul></li></ul></li></ul><h3 id="4-进制之间的快速转换"><a href="#4-进制之间的快速转换" class="headerlink" title="4. 进制之间的快速转换"></a>4. 进制之间的快速转换</h3><ul><li><strong>二进制到八进制</strong> 和 <strong>二进制到十六进制</strong> 可以通过分组快速转换：<ul><li><strong>二进制到八进制</strong>：每三位二进制数对应一位八进制数。例如：二进制 <code>101110</code> 可以分成 <code>101</code> 和 <code>110</code>，分别对应八进制的 <code>5</code> 和 <code>6</code>，所以结果是 <code>56</code>。</li><li><strong>二进制到十六进制</strong>：每四位二进制数对应一位十六进制数。例如：二进制 <code>11101100</code> 可以分成 <code>1110</code> 和 <code>1100</code>，分别对应十六进制的 <code>E</code> 和 <code>C</code>，所以结果是 <code>EC</code>。</li></ul></li></ul><h3 id="5-进制的实际应用"><a href="#5-进制的实际应用" class="headerlink" title="5. 进制的实际应用"></a>5. 进制的实际应用</h3><ul><li><strong>二进制</strong>：计算机底层运算、逻辑电路等。</li><li><strong>八进制</strong>：早期计算机系统，现代使用较少。</li><li><strong>十进制</strong>：日常生活中最常用，如数学运算。</li><li><strong>十六进制</strong>：编程中表示颜色代码（如 <code>#FF00FF</code>）、内存地址等。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>进制是用来表示数值的一种符号系统。</li><li>不同的进制系统有不同的符号数量和表示规则。</li><li>各进制之间的转换需要掌握其表示方式和运算规则。</li><li>计算机领域中最常用的是二进制和十六进制。十进制是日常生活中最为熟悉和使用的系统。</li></ul><p>掌握进制及其转换对理解计算机的工作原理和程序设计非常有帮助。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;进制（Number Base）是表示数值的方式之一，用不同的数字和符号来表示不同的数值。最常见的进制有二进制、十进制、八进制和十六进制等。接下来，详细介绍这些不同的进制及它们之间的转换。&lt;/p&gt;
&lt;h3 id=&quot;1-什么是进制？&quot;&gt;&lt;a href=&quot;#1-什么是进制？&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DIFF算法</title>
    <link href="https://promptonce.github.io/2024/10/03/DIFF%E7%AE%97%E6%B3%95/"/>
    <id>https://promptonce.github.io/2024/10/03/DIFF%E7%AE%97%E6%B3%95/</id>
    <published>2024-10-03T10:15:33.000Z</published>
    <updated>2024-10-03T10:20:25.211Z</updated>
    
    <content type="html"><![CDATA[<p>DIFF 算法的作用：同层树节点比较的算法那么 DIFF 算法是如何工作的？<br>一、首先是先计算新老 DOM 的最小变化该算法会先遍历一遍老的 DOM. 然后在遍历新的DOM，最后会判断是改变&#x2F;新增&#x2F;删除来重新排序。这样无疑是非常耗费计算的，我们看一看出总共遍历了三回、如果有一千个节点．那么就湖发生了十亿次的计算。<br>二. diff 算法的优化diff 算法的优化也就是这个算法的核心部分了，简单来说就是针对具有相同父节点的同层新旧子节点进行比较，不相同的话就会新增或者删除，而不是使用逐层搜索递归遍历的方式。时间复杂度为 O(n)。</p><ol><li>只比较同一层级，不跨级比较</li><li>标签不同，直接删除，不继续比较</li><li>标签名相同， key相同，就认为是相同节点，不继续深度比较</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DIFF 算法的作用：同层树节点比较的算法那么 DIFF 算法是如何工作的？&lt;br&gt;一、首先是先计算新老 DOM 的最小变化该算法会先遍历一遍老的 DOM. 然后在遍历新的DOM，最后会判断是改变&amp;#x2F;新增&amp;#x2F;删除来重新排序。这样无疑是非常耗费计算的，我们看一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vuex</title>
    <link href="https://promptonce.github.io/2024/10/03/Vuex/"/>
    <id>https://promptonce.github.io/2024/10/03/Vuex/</id>
    <published>2024-10-03T08:38:11.000Z</published>
    <updated>2024-10-03T08:42:00.743Z</updated>
    
    <content type="html"><![CDATA[<p>Vuex 通过集中存储和管理应用中的所有状态，避免了组件之间的状态不一致或数据混乱的问题。它的运作方式类似于 Flux 模式，能够帮助开发者更加有序地管理和维护应用的状态。 具体来说，Vuex 主要通过五个核心概念来工作：  </p><ol><li><p>state：集中存储应用的状态，相当于数据的存储中心。</p></li><li><p>getter：类似于计算属性，从 state 中派生出新的数据给组件使用。</p></li><li><p>mutation：唯一修改 state 的方式，必须是同步操作。</p></li><li><p>action：可以包含异步操作，然后通过调用 mutation 来更新 state。</p></li><li><p>modules：将 store 划分为多个模块，每个模块可以拥有自己的 state、mutation、action、getters。</p></li></ol><p>Vuex 的这种集中式的状态管理模式非常适合复杂的应用，尤其是当应用中的组件间状态需要共享时。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vuex 通过集中存储和管理应用中的所有状态，避免了组件之间的状态不一致或数据混乱的问题。它的运作方式类似于 Flux 模式，能够帮助开发者更加有序地管理和维护应用的状态。 具体来说，Vuex 主要通过五个核心概念来工作：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;state：集</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue中的keep-alive</title>
    <link href="https://promptonce.github.io/2024/10/02/Vue%E4%B8%AD%E7%9A%84keep-alive/"/>
    <id>https://promptonce.github.io/2024/10/02/Vue%E4%B8%AD%E7%9A%84keep-alive/</id>
    <published>2024-10-02T08:58:43.000Z</published>
    <updated>2024-10-02T09:01:14.348Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 中的 keep-alive用 keep-alive 包裏组件时．会缓存不活动的组件实例，而不是销毁．使得我们返回的时候能重新激活。 keep-alive主要用于保存组件状态或避免重复创建。避免重复渲染导致的性能间题。常见场景页面的缓存，如上面的保存浏览商品页的滚动条位置筛选信息等</p><blockquote><p>注意这个和这个 Keep-Alive 是不一样的．这个属性的作用是、往往我们三次握手后，传输完数据就会断开连接进行四次挥手、关闭 TCP 连接．但是当我们在头信息中加入了该属性&#96;那么 TCP 会在发送后仍然保持打开状态，这样浏览器就可以继续通过同一个 TCP 连接发送请求、保持 TCP 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vue 中的 keep-alive用 keep-alive 包裏组件时．会缓存不活动的组件实例，而不是销毁．使得我们返回的时候能重新激活。 keep-alive主要用于保存组件状态或避免重复创建。避免重复渲染导致的性能间题。常见场景页面的缓存，如上面的保存浏览商品页的滚动条</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue中Scoped原理</title>
    <link href="https://promptonce.github.io/2024/10/02/Vue%E4%B8%ADScoped%E5%8E%9F%E7%90%86/"/>
    <id>https://promptonce.github.io/2024/10/02/Vue%E4%B8%ADScoped%E5%8E%9F%E7%90%86/</id>
    <published>2024-10-02T08:39:36.000Z</published>
    <updated>2024-10-02T08:40:21.671Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 中的 scoped 样式的作用是为了让组件的样式只在该组件的范围内生效，避免影响全局或其他组件。它的实现通过给每个组件生成一个唯一的标识符（如 data-v-xxxxxx），并将这个标识符附加到组件内的 DOM 元素和样式上。这样一来，样式表中的选择器只会影响带有相应标识符的 DOM 元素，而不会污染其他组件的样式。 总结特点： 1. 局部样式作用域：组件内的样式只能作用于组件自身的标签，且不会影响外部或其他组件。 2. 自动添加标识：Vue 会自动为组件的 DOM 和样式添加特定的 data-v- 属性，确保样式的唯一性和作用范围。  这个机制有效地解决了样式冲突问题，尤其在大型应用中，它可以确保不同组件的样式独立。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vue 中的 scoped 样式的作用是为了让组件的样式只在该组件的范围内生效，避免影响全局或其他组件。它的实现通过给每个组件生成一个唯一的标识符（如 data-v-xxxxxx），并将这个标识符附加到组件内的 DOM 元素和样式上。这样一来，样式表中的选择器只会影响带有相</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue过滤器</title>
    <link href="https://promptonce.github.io/2024/09/30/Vue%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://promptonce.github.io/2024/09/30/Vue%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2024-09-30T10:48:44.000Z</published>
    <updated>2024-09-30T10:49:54.670Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 过滤器的功能就是对数据进行格式化处理。它提供了两种常见的方式：一个是在双花括号插值中使用管道符号“|”来进行过滤，比如将消息首字母大写；另一个是在 <code>v-bind</code> 中使用过滤器来对绑定的值进行格式化，比如格式化 ID。</p><p>开发者可以通过定义过滤器来自定义常见的格式转换规则，例如把字符串的首字母大写。这个过滤器可以定义在组件内部，也可以定义为全局过滤器。</p><p>总结一下：Vue 过滤器相当于一种方便的工具，帮助开发者在显示数据之前对其进行简单的处理，使得代码更简洁。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue Filter Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue 过滤器示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输入框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入一些文字&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>原始消息: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>过滤后的消息: &#123;&#123; message | capitalize &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建 Vue 实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 数据对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 定义过滤器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">capitalize</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          value = value.<span class="title function_">toString</span>()</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vue 过滤器的功能就是对数据进行格式化处理。它提供了两种常见的方式：一个是在双花括号插值中使用管道符号“|”来进行过滤，比如将消息首字母大写；另一个是在 &lt;code&gt;v-bind&lt;/code&gt; 中使用过滤器来对绑定的值进行格式化，比如格式化 ID。&lt;/p&gt;
&lt;p&gt;开发者可</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Segformer技术分析</title>
    <link href="https://promptonce.github.io/2024/09/29/Segformer%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    <id>https://promptonce.github.io/2024/09/29/Segformer%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</id>
    <published>2024-09-29T09:24:15.000Z</published>
    <updated>2024-09-29T14:20:08.394Z</updated>
    
    <content type="html"><![CDATA[<p>SegFormer避免了使用显式位置编码，所以在处理不同分辨率的图像时，不需要进行复杂的插值操作，原因主要是它通过<strong>卷积操作</strong>和<strong>层次结构</strong>来隐式地捕捉位置信息，而不是依赖于固定的、与图像分辨率相关的位置编码。</p><p>在传统的Transformer模型（例如ViT）中，位置编码是为每个输入特征（如图像的每个patch）明确指定的位置信息。当分辨率改变时，patch的数量也会随之变化，模型无法直接理解新分辨率下的位置信息，因此需要对位置编码进行插值，让它适应新的patch数量和图像分辨率。这是一个复杂的过程，容易引入误差。</p><p>而<strong>SegFormer</strong>通过以下方式避免了这一问题：</p><ol><li><p><strong>卷积的局部感知特性</strong>：SegFormer在编码阶段使用了<strong>卷积</strong>来生成<strong>Overlap Patch Embeddings</strong>。卷积操作自带局部的空间感知能力，因此它能在不同分辨率下自动调整，依旧保持对邻近像素关系的理解，不需要显式位置编码来帮助模型识别位置。</p></li><li><p><strong>层次化的特征提取</strong>：SegFormer通过层次结构逐级缩减特征图，提取不同分辨率的特征，从而保留了多尺度的空间信息。这种方式让模型在不依赖固定位置编码的情况下，也能从全局和局部两个层面理解图像的空间结构。</p></li></ol><p>因此，当图像的分辨率改变时，SegFormer可以自适应地调整，而不用像ViT那样需要重新插值位置编码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SegFormer避免了使用显式位置编码，所以在处理不同分辨率的图像时，不需要进行复杂的插值操作，原因主要是它通过&lt;strong&gt;卷积操作&lt;/strong&gt;和&lt;strong&gt;层次结构&lt;/strong&gt;来隐式地捕捉位置信息，而不是依赖于固定的、与图像分辨率相关的位置编码。&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>cookie和session</title>
    <link href="https://promptonce.github.io/2024/09/29/cookie%E5%92%8Csession/"/>
    <id>https://promptonce.github.io/2024/09/29/cookie%E5%92%8Csession/</id>
    <published>2024-09-28T16:46:21.000Z</published>
    <updated>2024-09-28T16:55:39.607Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Cookie</strong> 和 <strong>Session</strong> 是两种在网络请求中用来存储用户数据的机制。</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li>当你第一次访问某个网站时，服务器会把一些数据（叫做 Cookie）发到你的浏览器。</li><li>之后，每次你访问这个网站时，浏览器都会把这些 Cookie 发回给服务器。</li><li>Cookie 主要存储在本地电脑中，并且有大小限制，一般不能超过 4KB。</li><li>Cookie的保存形式分为会话Cookie和持久Cookie</li></ul><p><strong>会话 Cookie</strong> 和 <strong>持久 Cookie</strong> 的区别就在于它们的<strong>有效期</strong>和<strong>存储位置</strong>。</p><ol><li><p><strong>会话 Cookie</strong>（Session Cookie）：</p><ul><li>只在<strong>当前会话</strong>（即浏览器打开的这段时间）内有效。</li><li>当你关闭浏览器后，会话 Cookie 就会被自动删除。</li><li>会话 Cookie 主要用于临时信息存储，比如登录状态，关掉浏览器后就不再保存这些信息了。</li></ul></li><li><p><strong>持久 Cookie</strong>（Persistent Cookie）：</p><ul><li>它有明确的<strong>过期时间</strong>，可以在浏览器关闭后仍然保留，直到到达设定的过期时间或用户手动删除它。</li><li>持久 Cookie 常用于存储长期信息，比如网站的自动登录功能、用户偏好设置等。</li></ul></li></ol><p>总结就是：<strong>会话 Cookie</strong> 随浏览器关闭而消失，而 <strong>持久 Cookie</strong> 会保留到指定时间或被用户手动删除。</p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul><li>Session 是一种存储在服务器端的机制，它保存的是用户的会话信息。</li><li>当你登录某个网站后，服务器会生成一个 Session，保存你的登录状态等信息。之后每次你访问网站，服务器会根据你带上的 Cookie 来识别你，并找到对应的 Session 来确认你是谁。</li><li>Session 没有大小限制，但它会占用服务器的资源。</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>Cookie 存在你的浏览器里，而 Session 存在服务器端。</li><li>Cookie 有大小和存储时间的限制，而 Session 通常没有这些限制。</li></ul><h3 id="优点与缺点"><a href="#优点与缺点" class="headerlink" title="优点与缺点"></a>优点与缺点</h3><ul><li><strong>Cookie</strong> 比较方便，因为它存储在本地。但不太安全，容易被恶意利用。</li><li><strong>Session</strong> 更安全，但需要服务器资源。</li></ul><h3 id="SSO（单点登录）"><a href="#SSO（单点登录）" class="headerlink" title="SSO（单点登录）"></a>SSO（单点登录）</h3><ul><li>SSO 就是让你只需要登录一次，就能访问多个系统。这对于使用多个系统的环境非常方便。</li></ul><p>SSO的优点<br>降低访问第三⽅⽹站风险（⽤户密码不存储或外部管理）；<br>从不同的⽤户名和密码的组合减少密码疲劳；<br>减少花费的时间重新输⼊密码相同的⾝份；<br>降低IT成本适当降低⼀些IT帮助台调⽤有关密码；<br>SSO集中的所有其他应⽤程序和系统，⽤于⾝份验证服务器的⾝份验证，并与技术相结合是为了确保⽤户不必主动输⼊凭据⼀次以上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Cookie&lt;/strong&gt; 和 &lt;strong&gt;Session&lt;/strong&gt; 是两种在网络请求中用来存储用户数据的机制。&lt;/p&gt;
&lt;h3 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在浏览器中输入网址后发生了什么</title>
    <link href="https://promptonce.github.io/2024/09/29/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>https://promptonce.github.io/2024/09/29/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</id>
    <published>2024-09-28T16:22:39.000Z</published>
    <updated>2024-09-29T07:29:29.209Z</updated>
    
    <content type="html"><![CDATA[<p>当在浏览器中输入一个网址并按下回车键后，大致发生了以下几个步骤：</p><img src="/2024/09/29/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E2%BC%8A%E2%BD%B9%E5%9D%80%E5%90%8E%E5%8F%91%E2%BD%A3%E4%BA%86%E4%BB%80%E4%B9%88.png" class="" title="在浏览器中输入网址后发生了什么"><ol><li><strong>解析URL</strong>：浏览器会分析你输入的网址，把它分解成协议（如http或https）、域名（如example.com）等部分。</li><li><strong>生成HTTP请求</strong>：浏览器会根据解析好的网址，生成一个HTTP请求，准备向服务器获取网页内容。</li><li><strong>DNS查询</strong>：浏览器接着会向DNS服务器查询你输入的域名对应的IP地址，以便找到具体的服务器位置。</li><li><strong>与服务器建立连接</strong>：获取到IP地址后，浏览器会与目标服务器建立连接（如果是https，还会进行加密连接的建立）。</li><li><strong>发送HTTP请求</strong>：浏览器将之前生成的HTTP请求发给服务器，请求获取网页资源。</li><li><strong>服务器响应</strong>：服务器收到请求后，返回对应的网页数据（如HTML、CSS、图片等）。</li><li><strong>渲染网页</strong>：浏览器接收服务器的响应数据后，开始解析和渲染网页，将它显示在屏幕上。</li></ol><p>这些步骤迅速而连续地发生，最终会看到想要的网页。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当在浏览器中输入一个网址并按下回车键后，大致发生了以下几个步骤：&lt;/p&gt;
&lt;img src=&quot;/2024/09/29/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D</summary>
      
    
    
    
    
  </entry>
  
</feed>
