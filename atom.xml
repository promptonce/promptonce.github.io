<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PromptOnce</title>
  
  
  <link href="https://promptonce.github.io/atom.xml" rel="self"/>
  
  <link href="https://promptonce.github.io/"/>
  <updated>2025-06-15T13:34:14.398Z</updated>
  <id>https://promptonce.github.io/</id>
  
  <author>
    <name>penggan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cmd和powershell的区别</title>
    <link href="https://promptonce.github.io/2025/06/15/cmd%E5%92%8Cpowershell%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://promptonce.github.io/2025/06/15/cmd%E5%92%8Cpowershell%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2025-06-15T13:33:33.000Z</published>
    <updated>2025-06-15T13:34:14.398Z</updated>
    
    <content type="html"><![CDATA[<p>  powershell在cmd上支持了更多的语法支持。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  powershell在cmd上支持了更多的语法支持。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>显示器亮度对比度护眼调节设置</title>
    <link href="https://promptonce.github.io/2025/06/09/%E6%98%BE%E7%A4%BA%E5%99%A8%E4%BA%AE%E5%BA%A6%E5%AF%B9%E6%AF%94%E5%BA%A6%E6%8A%A4%E7%9C%BC%E8%B0%83%E8%8A%82%E8%AE%BE%E7%BD%AE/"/>
    <id>https://promptonce.github.io/2025/06/09/%E6%98%BE%E7%A4%BA%E5%99%A8%E4%BA%AE%E5%BA%A6%E5%AF%B9%E6%AF%94%E5%BA%A6%E6%8A%A4%E7%9C%BC%E8%B0%83%E8%8A%82%E8%AE%BE%E7%BD%AE/</id>
    <published>2025-06-09T15:25:05.000Z</published>
    <updated>2025-06-16T09:49:23.520Z</updated>
    
    <content type="html"><![CDATA[<p>  调成近似自然光下的纸张效果。<br>  将一张A4纸紧贴屏幕中央调节屏幕和纸张差不多效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  调成近似自然光下的纸张效果。&lt;br&gt;  将一张A4纸紧贴屏幕中央调节屏幕和纸张差不多效果。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>软件开发需求实现过程中的成本核算问题</title>
    <link href="https://promptonce.github.io/2025/06/04/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E9%9C%80%E6%B1%82%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%88%90%E6%9C%AC%E6%A0%B8%E7%AE%97%E9%97%AE%E9%A2%98/"/>
    <id>https://promptonce.github.io/2025/06/04/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E9%9C%80%E6%B1%82%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%88%90%E6%9C%AC%E6%A0%B8%E7%AE%97%E9%97%AE%E9%A2%98/</id>
    <published>2025-06-04T15:46:32.000Z</published>
    <updated>2025-06-04T15:50:01.521Z</updated>
    
    <content type="html"><![CDATA[<p>  不是仅通过大脑中的仿真来核算，需要结合真实环境来核算，比如程序运行和调试必要的时间，这些时间和同步代码执行的时间可能差了几个数量级。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  不是仅通过大脑中的仿真来核算，需要结合真实环境来核算，比如程序运行和调试必要的时间，这些时间和同步代码执行的时间可能差了几个数量级。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何减少软件开发编程语言切换带来的不适感</title>
    <link href="https://promptonce.github.io/2025/06/04/%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%88%87%E6%8D%A2%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%8D%E9%80%82%E6%84%9F/"/>
    <id>https://promptonce.github.io/2025/06/04/%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%88%87%E6%8D%A2%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%8D%E9%80%82%E6%84%9F/</id>
    <published>2025-06-04T15:37:13.000Z</published>
    <updated>2025-06-04T15:41:20.160Z</updated>
    
    <content type="html"><![CDATA[<p>  不同编程语言本质上是不同编程语言作者对物理规律，更具体来说是计算机技术的设计方式不同，包含了原作者对技术转换能源的理解，但这些编程语言设计都有一些通用的理念，这个是在切换编程语言后可以利用这些通用的东西来减少语言切换的阻尼感。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  不同编程语言本质上是不同编程语言作者对物理规律，更具体来说是计算机技术的设计方式不同，包含了原作者对技术转换能源的理解，但这些编程语言设计都有一些通用的理念，这个是在切换编程语言后可以利用这些通用的东西来减少语言切换的阻尼感。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>软件开发中如何开发新需求</title>
    <link href="https://promptonce.github.io/2025/06/04/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E6%96%B0%E9%9C%80%E6%B1%82/"/>
    <id>https://promptonce.github.io/2025/06/04/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E6%96%B0%E9%9C%80%E6%B1%82/</id>
    <published>2025-06-04T15:29:56.000Z</published>
    <updated>2025-06-04T15:32:18.186Z</updated>
    
    <content type="html"><![CDATA[<p>  保证各个代码系统处于开发者模式启动中，对于前后端分离的系统，前端开发环境需要启动起来，后端服务器要远程登录上，因为随时可能添加测试代码测试需求实现过程中的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  保证各个代码系统处于开发者模式启动中，对于前后端分离的系统，前端开发环境需要启动起来，后端服务器要远程登录上，因为随时可能添加测试代码测试需求实现过程中的问题。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript Promise产生原因</title>
    <link href="https://promptonce.github.io/2025/06/03/JavaScript-Promise%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0/"/>
    <id>https://promptonce.github.io/2025/06/03/JavaScript-Promise%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0/</id>
    <published>2025-06-03T02:38:35.000Z</published>
    <updated>2025-06-03T02:44:39.408Z</updated>
    
    <content type="html"><![CDATA[<p>  JavaScript的并发是基于单线程的，单线程实现并发并不一定是不好的，单线程中资源共享较好，从源头上避免了多线程之间的一些问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  JavaScript的并发是基于单线程的，单线程实现并发并不一定是不好的，单线程中资源共享较好，从源头上避免了多线程之间的一些问题。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>异步编程的适用场景</title>
    <link href="https://promptonce.github.io/2025/06/03/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>https://promptonce.github.io/2025/06/03/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF/</id>
    <published>2025-06-03T01:13:39.000Z</published>
    <updated>2025-06-03T02:19:36.064Z</updated>
    
    <content type="html"><![CDATA[<p>  同步编程是一种不考虑特殊情况的开发模式，其假设是所有任务执行的速度非常快，但实际中I&#x2F;O密集型任务和网络请求任务耗时较长，异步编程就像一个补丁用于解决这个问题，为什么不能统一呢？这和想统一宇宙中的几大力一样，经典力学在量子维度失效，这样就要去否定经典力学的价值吗？经典力学同样能解决一些社会中的问题，这个世界上没有绝对的完美，只有相对的完美，如果你觉得有绝对的完美，那么想一想蒙蔽你的到底是啥。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  同步编程是一种不考虑特殊情况的开发模式，其假设是所有任务执行的速度非常快，但实际中I&amp;#x2F;O密集型任务和网络请求任务耗时较长，异步编程就像一个补丁用于解决这个问题，为什么不能统一呢？这和想统一宇宙中的几大力一样，经典力学在量子维度失效，这样就要去否定经典力学的价值</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>并发、并行、异步、同步</title>
    <link href="https://promptonce.github.io/2025/06/02/%E5%B9%B6%E5%8F%91%E3%80%81%E5%B9%B6%E8%A1%8C%E3%80%81%E5%BC%82%E6%AD%A5%E3%80%81%E5%90%8C%E6%AD%A5/"/>
    <id>https://promptonce.github.io/2025/06/02/%E5%B9%B6%E5%8F%91%E3%80%81%E5%B9%B6%E8%A1%8C%E3%80%81%E5%BC%82%E6%AD%A5%E3%80%81%E5%90%8C%E6%AD%A5/</id>
    <published>2025-06-02T15:29:49.000Z</published>
    <updated>2025-06-03T02:06:37.635Z</updated>
    
    <content type="html"><![CDATA[<p>  一个人在烧水、洗衣服、玩手机时可以选择做完一件事情后再做另一件事情，即便这样是低效的但也可以抽象为一种cpu的工作方式，站在更高效转换能源的角度，更合理的抽象方式是让CPU在等待一个任务执行完成的间隙切换到其他任务，对于I&#x2F;O密集型和网络请求这类任务来说，优化CPU的工作模式相比于提高这些任务的执行速度更有性价比，感觉计算机技术有点像在物理环境受限的情况下用智慧去走捷径的妥协艺术。<br>  并发是指单核CPU轮流执行线程。并行指多核CPU不同核处理不同线程，做到真正的并行。同步是一种开发模式，后面的代码必须等前面的代码执行完成后才能执行。同步也是一种开发模式，后面的代码可以不用等前面的代码执行完成才开始执行，当数据返回时，通过回调函数的方式再执行前面的代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  一个人在烧水、洗衣服、玩手机时可以选择做完一件事情后再做另一件事情，即便这样是低效的但也可以抽象为一种cpu的工作方式，站在更高效转换能源的角度，更合理的抽象方式是让CPU在等待一个任务执行完成的间隙切换到其他任务，对于I&amp;#x2F;O密集型和网络请求这类任务来说，优化</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>进程与线程</title>
    <link href="https://promptonce.github.io/2025/06/02/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>https://promptonce.github.io/2025/06/02/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</id>
    <published>2025-06-02T14:42:51.000Z</published>
    <updated>2025-06-02T14:50:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>  程序代码存放在硬盘中，这和菜谱存放在柜子中道理相同，程序代码需要执行时，将代码读入到内存中，可以将一段代码读入多份到内存中，也就创建了多个进程，一个进程中为啥还要有“子进程”线程呢？比如文档编辑软件中，处理键盘回车换行的程序和页面渲染程序、保存文档到硬盘的程序都需要执行，这些程序共享同一个数据“文档”，这就时线程高效的原因。 一个进程的多个线程会轮流占用CPU时间。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  程序代码存放在硬盘中，这和菜谱存放在柜子中道理相同，程序代码需要执行时，将代码读入到内存中，可以将一段代码读入多份到内存中，也就创建了多个进程，一个进程中为啥还要有“子进程”线程呢？比如文档编辑软件中，处理键盘回车换行的程序和页面渲染程序、保存文档到硬盘的程序都需要执行</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vuex的理解</title>
    <link href="https://promptonce.github.io/2025/06/02/Vuex%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://promptonce.github.io/2025/06/02/Vuex%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2025-06-02T13:52:19.000Z</published>
    <updated>2025-06-02T14:10:05.058Z</updated>
    
    <content type="html"><![CDATA[<p>  一个Vue应用中包含多个Vue组件，组件与组件之间可能通信关系复杂，这个时候需要Vuex作为中心进行管理，这和家里面的中心储物柜原理相同，1. 可以减小开发成本，避免多层嵌套组件链条中数据修改不好追踪的问题。 2. 通过维护唯一数据源，避免出现数据不一致的问题。3. 将数据处理逻辑集中在一个地方，避免数据处理方法分布在多个method中不好维护的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  一个Vue应用中包含多个Vue组件，组件与组件之间可能通信关系复杂，这个时候需要Vuex作为中心进行管理，这和家里面的中心储物柜原理相同，1. 可以减小开发成本，避免多层嵌套组件链条中数据修改不好追踪的问题。 2. 通过维护唯一数据源，避免出现数据不一致的问题。3. 将</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis相对于传统磁盘数据库</title>
    <link href="https://promptonce.github.io/2025/05/27/redis%E7%9B%B8%E5%AF%B9%E4%BA%8E%E4%BC%A0%E7%BB%9F%E7%A3%81%E7%9B%98%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://promptonce.github.io/2025/05/27/redis%E7%9B%B8%E5%AF%B9%E4%BA%8E%E4%BC%A0%E7%BB%9F%E7%A3%81%E7%9B%98%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2025-05-27T03:04:14.000Z</published>
    <updated>2025-05-28T02:09:33.691Z</updated>
    
    <content type="html"><![CDATA[<p>  传统sql语句通过中磁盘中读取数据，时间单位为毫秒级，redis在内存中读取数据，时间单位为纳秒级，对于高频读写的数据，用内存数据库redis会极大提高系统处理速度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  传统sql语句通过中磁盘中读取数据，时间单位为毫秒级，redis在内存中读取数据，时间单位为纳秒级，对于高频读写的数据，用内存数据库redis会极大提高系统处理速度。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AutoDL原理</title>
    <link href="https://promptonce.github.io/2025/05/24/AutoDL%E5%8E%9F%E7%90%86/"/>
    <id>https://promptonce.github.io/2025/05/24/AutoDL%E5%8E%9F%E7%90%86/</id>
    <published>2025-05-24T02:44:06.000Z</published>
    <updated>2025-05-24T02:46:41.429Z</updated>
    
    <content type="html"><![CDATA[<img src="/2025/05/24/AutoDL%E5%8E%9F%E7%90%86/AutoDL%E5%8E%9F%E7%90%86.png" class="" title="AutoDL原理">]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2025/05/24/AutoDL%E5%8E%9F%E7%90%86/AutoDL%E5%8E%9F%E7%90%86.png&quot; class=&quot;&quot; title=&quot;AutoDL原理&quot;&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>静态语言和动态语言</title>
    <link href="https://promptonce.github.io/2025/05/23/%E9%9D%99%E6%80%81%E8%AF%AD%E8%A8%80%E5%92%8C%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80/"/>
    <id>https://promptonce.github.io/2025/05/23/%E9%9D%99%E6%80%81%E8%AF%AD%E8%A8%80%E5%92%8C%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80/</id>
    <published>2025-05-23T14:41:06.000Z</published>
    <updated>2025-05-23T14:46:16.270Z</updated>
    
    <content type="html"><![CDATA[<p>  对于变量定义而言，变量定义后，类型可以改变的语言就是动态语言，类型不能改变的就是静态语言，比如Java是静态语言，JavaScript是动态语言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  对于变量定义而言，变量定义后，类型可以改变的语言就是动态语言，类型不能改变的就是静态语言，比如Java是静态语言，JavaScript是动态语言。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前后端协同开发</title>
    <link href="https://promptonce.github.io/2025/05/22/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%8D%8F%E5%90%8C%E5%BC%80%E5%8F%91/"/>
    <id>https://promptonce.github.io/2025/05/22/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%8D%8F%E5%90%8C%E5%BC%80%E5%8F%91/</id>
    <published>2025-05-22T07:37:51.000Z</published>
    <updated>2025-05-22T07:53:47.633Z</updated>
    
    <content type="html"><![CDATA[<p>  通过引入API接口来简化前端的思考负担，将复杂的逻辑往后端迁移，数据库和后端交互最自然也最灵活， 后端不仅仅是具有访问数据库的能力，还具有实现复杂业务逻辑的能力，前端专注于解决可视化问题，包括前端编写组件收集数据传递到后端，从后端接收数据进行渲染，前端开发人员不用被复杂的业务逻辑干扰专注度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  通过引入API接口来简化前端的思考负担，将复杂的逻辑往后端迁移，数据库和后端交互最自然也最灵活， 后端不仅仅是具有访问数据库的能力，还具有实现复杂业务逻辑的能力，前端专注于解决可视化问题，包括前端编写组件收集数据传递到后端，从后端接收数据进行渲染，前端开发人员不用被复杂</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript模块导出和导入</title>
    <link href="https://promptonce.github.io/2025/05/22/JavaScript%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%87%BA%E5%92%8C%E5%AF%BC%E5%85%A5/"/>
    <id>https://promptonce.github.io/2025/05/22/JavaScript%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%87%BA%E5%92%8C%E5%AF%BC%E5%85%A5/</id>
    <published>2025-05-22T06:31:52.000Z</published>
    <updated>2025-06-02T13:27:26.988Z</updated>
    
    <content type="html"><![CDATA[<p>  创建一个js文件，可以直接编写打印arguments变量的代码，这是因为用Node运行这个js文件时，node会对这个文件进行包装。在一个js文件中，如果需要导出数据，这里所说的数据包括函数，在javascript中，函数和数字，字符串等数据类型具有同等地位，可以通过module.exports &#x3D; {xxx}的方式导出，在其他文件中通过require(xxx.js)导入使用，这种方式为开发者实现代码整洁提供了方法。<br>  es6中通过export和import实现，一个文件只能有一个export default，对于export default的数据，import时可以不使用{}, 非export default的数据，需要使用{}，这是LLM擅长的东西。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  创建一个js文件，可以直接编写打印arguments变量的代码，这是因为用Node运行这个js文件时，node会对这个文件进行包装。在一个js文件中，如果需要导出数据，这里所说的数据包括函数，在javascript中，函数和数字，字符串等数据类型具有同等地位，可以通过m</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>文本Prompt分段工具</title>
    <link href="https://promptonce.github.io/2025/05/21/%E6%96%87%E6%9C%ACPrompt%E5%88%86%E6%AE%B5%E5%B7%A5%E5%85%B7/"/>
    <id>https://promptonce.github.io/2025/05/21/%E6%96%87%E6%9C%ACPrompt%E5%88%86%E6%AE%B5%E5%B7%A5%E5%85%B7/</id>
    <published>2025-05-21T10:16:49.000Z</published>
    <updated>2025-05-21T10:19:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>​利用程序自动对文本进行切片，灵活修改切片段落字数，自动完成固定prompt模板连接，保持上下文的清洁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	利用程序自动对文本进行切片，灵活修改切片段落字数，自动完成固定prompt模板连接，保持上下文的清洁。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python面向对象中的抽象方法</title>
    <link href="https://promptonce.github.io/2025/05/20/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    <id>https://promptonce.github.io/2025/05/20/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/</id>
    <published>2025-05-20T08:33:29.000Z</published>
    <updated>2025-05-20T08:53:06.029Z</updated>
    
    <content type="html"><![CDATA[<p>​让错误能够在编译器运行时就检查出来，不用等到结果报错再改，用规范减少思维负担。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	让错误能够在编译器运行时就检查出来，不用等到结果报错再改，用规范减少思维负担。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>序列化和反序列化</title>
    <link href="https://promptonce.github.io/2025/05/14/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://promptonce.github.io/2025/05/14/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2025-05-14T05:26:18.000Z</published>
    <updated>2025-05-14T05:39:17.189Z</updated>
    
    <content type="html"><![CDATA[<p>​</p><p>​计算机软件技术是对现实世界的抽象，宇宙间有万物，万物如何交互可以通过软件设计来抽象，受限于物质组合的发展，软件抽象设计也是一个逐步迭代的过程。当前宇宙的发展阶段为计算机基于电磁波这种物质而进行软件设计，两台计算机之间如何传递对象呢，按照OOP的思想，对象虽然位于计算机中，但仍然是一个逻辑上的实体，如何定义对象传输成功了呢？保证具有对象的所有信息就行，即通过序列化后通过HTTP传输，接收方可以通过与发送方互相达成协议，保证接收方能够按照自己的方式正确将序列化的内容进行还原，这是当下物质发展阶段的可以通用的一套方案。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	&lt;/p&gt;
&lt;p&gt;​	计算机软件技术是对现实世界的抽象，宇宙间有万物，万物如何交互可以通过软件设计来抽象，受限于物质组合的发展，软件抽象设计也是一个逐步迭代的过程。当前宇宙的发展阶段为计算机基于电磁波这种物质而进行软件设计，两台计算机之间如何传递对象呢，按照OOP的思想，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>function call设计理念</title>
    <link href="https://promptonce.github.io/2025/05/12/function-call%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/"/>
    <id>https://promptonce.github.io/2025/05/12/function-call%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/</id>
    <published>2025-05-12T07:34:18.000Z</published>
    <updated>2025-05-12T07:43:27.528Z</updated>
    
    <content type="html"><![CDATA[<p>​程序运行无非就是输入输出，LLM的出现结合Function Call技术可以将程序输入这一步放宽松，用户输入的是自然语言也可以通过LLM转为程序能理解的输入，利用了LLM的自然语言处理能力和推理能力，有了标准化的输入后程序能够执行一些和工具交互的操作，如果调用的工具能否返回结果，那么还可以将调用结果返回给LLM，再利用LLM的NLP和推理能力优化输出。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	程序运行无非就是输入输出，LLM的出现结合Function Call技术可以将程序输入这一步放宽松，用户输入的是自然语言也可以通过LLM转为程序能理解的输入，利用了LLM的自然语言处理能力和推理能力，有了标准化的输入后程序能够执行一些和工具交互的操作，如果调用的工具能否</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript语言设计初衷</title>
    <link href="https://promptonce.github.io/2025/05/11/JavaScript%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E5%88%9D%E8%A1%B7/"/>
    <id>https://promptonce.github.io/2025/05/11/JavaScript%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E5%88%9D%E8%A1%B7/</id>
    <published>2025-05-11T14:23:29.000Z</published>
    <updated>2025-05-11T14:38:29.970Z</updated>
    
    <content type="html"><![CDATA[<p>学习JavaScript语言需要有一些思想补丁，这门语言设计时为了追求开发速度所以不是特别严谨，比如定义var变量会做变量提升，在变量定义前打印也不会报错，这在其他语言里是不允许的。定义function A时又会自动创建A.prototype对象。只要通过new关键字调用，任何函数都可以作为构造函数。这些无形发生的过程按照其他设计严谨的语言逻辑去理解是不行的，需要加以防范。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习JavaScript语言需要有一些思想补丁，这门语言设计时为了追求开发速度所以不是特别严谨，比如定义var变量会做变量提升，在变量定义前打印也不会报错，这在其他语言里是不允许的。定义function A时又会自动创建A.prototype对象。只要通过new关键字调用，</summary>
      
    
    
    
    
  </entry>
  
</feed>
