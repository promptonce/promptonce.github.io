<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PromptOnce</title>
  
  
  <link href="https://promptonce.github.io/atom.xml" rel="self"/>
  
  <link href="https://promptonce.github.io/"/>
  <updated>2024-10-14T05:32:14.372Z</updated>
  <id>https://promptonce.github.io/</id>
  
  <author>
    <name>penggan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript组合继承</title>
    <link href="https://promptonce.github.io/2024/10/14/JavaScript%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF/"/>
    <id>https://promptonce.github.io/2024/10/14/JavaScript%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF/</id>
    <published>2024-10-14T05:26:21.000Z</published>
    <updated>2024-10-14T05:32:14.372Z</updated>
    
    <content type="html"><![CDATA[<hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="string">&quot;我是父类prototype上的属性&quot;</span>;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个Child实例</span></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">sayHello</span> === child2.<span class="property">sayHello</span>);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parentObj = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parentObj.<span class="property">a</span>);<span class="comment">//我是父类prototype上的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">a</span>)<span class="comment">//我是父类prototype上的属性</span></span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>原型属性不会被共享。</li><li>可以继承父类的原型链上的属性和方法。<br>缺点：</li><li>调用了 2 次 Parent()。</li><li>它在 child 的 prototype 上添加了父类的属性和方法。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript构造函数继承</title>
    <link href="https://promptonce.github.io/2024/10/14/JavaScript%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF/"/>
    <id>https://promptonce.github.io/2024/10/14/JavaScript%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF/</id>
    <published>2024-10-14T05:11:32.000Z</published>
    <updated>2024-10-14T05:22:54.129Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="string">&quot;我是父类prototype上的属性&quot;</span>;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个Child实例</span></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">sayHello</span> === child2.<span class="property">sayHello</span>);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parentObj = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parentObj.<span class="property">a</span>);<span class="comment">//我是父类prototype上的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">a</span>)<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>优点：这种继承方式的好处是，原型属性不会被共享。<br>缺点：它不能继承父类prototype上的属性</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>原型链继承</title>
    <link href="https://promptonce.github.io/2024/10/14/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/"/>
    <id>https://promptonce.github.io/2024/10/14/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/</id>
    <published>2024-10-14T04:58:43.000Z</published>
    <updated>2024-10-14T05:18:47.604Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)  &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;child&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="title function_">getName</span>());<span class="comment">// &quot;child&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承父类，这里是关键，实现原型链继承</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化子类</span></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> <span class="title function_">child</span>();</span><br><span class="line"></span><br><span class="line">child1.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">arr</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child2.<span class="property">arr</span>)</span><br></pre></td></tr></table></figure><p>原型链继承的一个主要问题是包含引用类型值的原型属性会被所有实例共享。换而言之，如果一个实例改变了该属性，那么其他实例的该属性也会被改变</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>论文参考文献总结</title>
    <link href="https://promptonce.github.io/2024/10/14/%E8%AE%BA%E6%96%87%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/14/%E8%AE%BA%E6%96%87%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-14T02:56:30.000Z</published>
    <updated>2024-10-14T02:59:38.715Z</updated>
    
    <content type="html"><![CDATA[<h3 id="论文参考文献的主要格式"><a href="#论文参考文献的主要格式" class="headerlink" title="论文参考文献的主要格式"></a>论文参考文献的主要格式</h3><p>在学术写作中，最常用的参考文献格式包括APA（美国心理学会）、MLA（现代语言协会）、Chicago（芝加哥格式）和IEEE（主要用于工程和计算机科学）。以下是这几种常见格式的说明和示例。</p><hr><h3 id="1-APA格式-American-Psychological-Association"><a href="#1-APA格式-American-Psychological-Association" class="headerlink" title="1. APA格式 (American Psychological Association)"></a>1. <strong>APA格式 (American Psychological Association)</strong></h3><p>通常用于社会科学和心理学领域。它的特点是以作者的姓氏和出版年份为主。</p><h4 id="书籍示例："><a href="#书籍示例：" class="headerlink" title="书籍示例："></a>书籍示例：</h4><p><strong>格式</strong>:<br>作者姓氏, 姓名首字母. (出版年份). <em>书名</em>. 出版地: 出版商.</p><p><strong>示例</strong>:<br>Smith, J. (2020). <em>Cognitive Psychology</em>. New York: Academic Press.</p><h4 id="期刊文章示例："><a href="#期刊文章示例：" class="headerlink" title="期刊文章示例："></a>期刊文章示例：</h4><p><strong>格式</strong>:<br>作者姓氏, 姓名首字母. (出版年份). 文章标题. <em>期刊名称</em>, 卷号(期号), 页码.</p><p><strong>示例</strong>:<br>Brown, L. (2019). The impact of stress on memory. <em>Journal of Experimental Psychology</em>, 45(3), 123-145.</p><hr><h3 id="2-MLA格式-Modern-Language-Association"><a href="#2-MLA格式-Modern-Language-Association" class="headerlink" title="2. MLA格式 (Modern Language Association)"></a>2. <strong>MLA格式 (Modern Language Association)</strong></h3><p>通常用于人文学科，尤其是文学、语言学等。MLA格式更注重作者和作品的标题。</p><h4 id="书籍示例：-1"><a href="#书籍示例：-1" class="headerlink" title="书籍示例："></a>书籍示例：</h4><p><strong>格式</strong>:<br>作者姓氏, 名字. <em>书名</em>. 出版社, 出版年份.</p><p><strong>示例</strong>:<br>Smith, John. <em>Understanding Poetry</em>. Oxford University Press, 2018.</p><h4 id="期刊文章示例：-1"><a href="#期刊文章示例：-1" class="headerlink" title="期刊文章示例："></a>期刊文章示例：</h4><p><strong>格式</strong>:<br>作者姓氏, 名字. “文章标题.” <em>期刊名称</em>, 卷号, 期号, 出版年份, 页码.</p><p><strong>示例</strong>:<br>Brown, Lisa. “Cultural Approaches to Modern Poetry.” <em>Literary Review</em>, vol. 45, no. 2, 2020, pp. 34-56.</p><hr><h3 id="3-Chicago格式-芝加哥格式"><a href="#3-Chicago格式-芝加哥格式" class="headerlink" title="3. Chicago格式 (芝加哥格式)"></a>3. <strong>Chicago格式 (芝加哥格式)</strong></h3><p>适用于历史学和一些人文学科，有两种主要风格：注释-书目制和作者-日期制。这里介绍的是注释-书目制。</p><h4 id="书籍示例：-2"><a href="#书籍示例：-2" class="headerlink" title="书籍示例："></a>书籍示例：</h4><p><strong>格式</strong>:<br>作者姓氏, 名字. <em>书名</em>. 出版地: 出版社, 出版年份.</p><p><strong>示例</strong>:<br>Smith, John. <em>History of the Roman Empire</em>. Chicago: University of Chicago Press, 2017.</p><h4 id="期刊文章示例：-2"><a href="#期刊文章示例：-2" class="headerlink" title="期刊文章示例："></a>期刊文章示例：</h4><p><strong>格式</strong>:<br>作者姓氏, 名字. “文章标题.” <em>期刊名称</em> 卷号, 期号 (出版年份): 页码.</p><p><strong>示例</strong>:<br>Brown, Lisa. “The Role of Women in Roman Politics.” <em>Classical Studies Journal</em> 35, no. 4 (2019): 45-67.</p><hr><h3 id="4-IEEE格式"><a href="#4-IEEE格式" class="headerlink" title="4. IEEE格式"></a>4. <strong>IEEE格式</strong></h3><p>主要用于工程、计算机科学等技术领域。IEEE采用编号系统来标示参考文献。</p><h4 id="书籍示例：-3"><a href="#书籍示例：-3" class="headerlink" title="书籍示例："></a>书籍示例：</h4><p><strong>格式</strong>:<br>[编号] 作者姓名, <em>书名</em>, 版本 (如果有). 出版地: 出版社, 出版年份, 页码.</p><p><strong>示例</strong>:<br>[1] J. Smith, <em>Introduction to Robotics</em>, 2nd ed. New York: McGraw-Hill, 2019, pp. 100-120.</p><h4 id="期刊文章示例：-3"><a href="#期刊文章示例：-3" class="headerlink" title="期刊文章示例："></a>期刊文章示例：</h4><p><strong>格式</strong>:<br>[编号] 作者姓名, “文章标题,” <em>期刊名称</em>, 卷号, 期号, 页码, 出版年份.</p><p><strong>示例</strong>:<br>[2] L. Brown, “Network security challenges,” <em>IEEE Transactions on Computers</em>, vol. 68, no. 3, pp. 45-58, 2018.</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;论文参考文献的主要格式&quot;&gt;&lt;a href=&quot;#论文参考文献的主要格式&quot; class=&quot;headerlink&quot; title=&quot;论文参考文献的主要格式&quot;&gt;&lt;/a&gt;论文参考文献的主要格式&lt;/h3&gt;&lt;p&gt;在学术写作中，最常用的参考文献格式包括APA（美国心理学会）、MLA</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端防抖</title>
    <link href="https://promptonce.github.io/2024/10/13/%E5%89%8D%E7%AB%AF%E9%98%B2%E6%8A%96/"/>
    <id>https://promptonce.github.io/2024/10/13/%E5%89%8D%E7%AB%AF%E9%98%B2%E6%8A%96/</id>
    <published>2024-10-13T08:38:38.000Z</published>
    <updated>2024-10-13T08:46:48.082Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端防抖（Debounce）详解及应用"><a href="#前端防抖（Debounce）详解及应用" class="headerlink" title="前端防抖（Debounce）详解及应用"></a>前端防抖（Debounce）详解及应用</h3><p>在前端开发中，用户的操作可能会频繁触发事件，如输入框输入、窗口大小调整、按钮点击等。如果每次事件都立即触发相应的处理逻辑，可能会导致性能问题，甚至让用户体验变差。为了解决这些问题，我们可以使用<strong>防抖（Debounce）</strong>技术。防抖可以有效减少高频事件的处理次数，提高页面性能。</p><p>本文将从防抖的定义、实现、应用场景等多个方面进行详细讲解。</p><hr><h3 id="一、什么是防抖？"><a href="#一、什么是防抖？" class="headerlink" title="一、什么是防抖？"></a>一、什么是防抖？</h3><p><strong>防抖</strong>的基本概念是：<strong>在事件触发后，等待一定时间才执行回调函数，如果在等待时间内事件再次触发，则重新计时</strong>。防抖的主要目的在于减少不必要的高频触发，确保函数仅在一段时间后且没有其他触发事件时才执行。</p><h4 id="防抖的典型例子："><a href="#防抖的典型例子：" class="headerlink" title="防抖的典型例子："></a>防抖的典型例子：</h4><p>用户在搜索框中输入时，可能每个字符输入都会触发搜索请求。如果用户连续输入多个字符，就会发起多次请求。但实际上我们只希望用户停止输入时，再触发一次搜索。这时候，防抖就可以派上用场了。</p><h3 id="二、防抖的原理及实现"><a href="#二、防抖的原理及实现" class="headerlink" title="二、防抖的原理及实现"></a>二、防抖的原理及实现</h3><h4 id="1-核心原理"><a href="#1-核心原理" class="headerlink" title="1. 核心原理"></a>1. 核心原理</h4><p>防抖的核心原理是利用<strong>定时器</strong>，在事件触发时，不立即执行回调函数，而是延迟执行。如果在延迟期间事件再次触发，则清除之前的定时器，重新开始计时。只有当设定的延迟时间结束且没有新事件触发时，才会执行回调函数。</p><h4 id="2-防抖的基本实现"><a href="#2-防抖的基本实现" class="headerlink" title="2. 防抖的基本实现"></a>2. 防抖的基本实现</h4><p>我们可以通过 <code>setTimeout</code> 和 <code>clearTimeout</code> 来实现防抖功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer;  <span class="comment">// 用于保存定时器的ID</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);  <span class="comment">// 如果定时器存在，先清除</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);        <span class="comment">// 在指定延迟后执行函数</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>debounce</code> 函数接受两个参数：</p><ul><li><code>fn</code>：需要防抖的函数。</li><li><code>delay</code>：延迟时间（毫秒）。</li></ul><p><strong>关键点</strong>在于：每次调用返回的函数时，都会重置定时器，只有在最后一次触发后的延迟时间过去，才会执行传入的函数。</p><h4 id="3-防抖函数的使用"><a href="#3-防抖函数的使用" class="headerlink" title="3. 防抖函数的使用"></a>3. 防抖函数的使用</h4><p>我们可以将防抖应用在用户的输入事件中，比如搜索框：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;搜索请求发起&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debouncedSearch = <span class="title function_">debounce</span>(search, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, debouncedSearch);</span><br></pre></td></tr></table></figure><p>在上面的例子中，每次用户在输入框中输入字符时，都会触发 <code>input</code> 事件。由于 <code>search</code> 函数被防抖处理，只有用户停止输入并且超过300毫秒后，搜索请求才会真正发出。</p><h3 id="三、防抖的应用场景"><a href="#三、防抖的应用场景" class="headerlink" title="三、防抖的应用场景"></a>三、防抖的应用场景</h3><h4 id="1-搜索框输入"><a href="#1-搜索框输入" class="headerlink" title="1. 搜索框输入"></a>1. <strong>搜索框输入</strong></h4><p>在用户输入时，避免每次字符变化都发起请求。防抖可以确保只在用户停止输入后的一段时间触发搜索请求。</p><h4 id="2-窗口调整大小"><a href="#2-窗口调整大小" class="headerlink" title="2. 窗口调整大小"></a>2. <strong>窗口调整大小</strong></h4><p>当用户调整浏览器窗口大小时，频繁触发 <code>resize</code> 事件，可能会导致页面性能下降。防抖可以保证在用户停止调整窗口大小后一段时间再执行相关操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="title function_">debounce</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口大小调整后处理逻辑&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">300</span>));</span><br></pre></td></tr></table></figure><h4 id="3-按钮点击"><a href="#3-按钮点击" class="headerlink" title="3. 按钮点击"></a>3. <strong>按钮点击</strong></h4><p>有时我们需要防止按钮被短时间内重复点击，如避免表单多次提交。通过防抖，可以防止按钮被频繁点击触发事件。</p><h4 id="4-滚动事件"><a href="#4-滚动事件" class="headerlink" title="4. 滚动事件"></a>4. <strong>滚动事件</strong></h4><p>滚动页面时，会触发 <code>scroll</code> 事件，如果绑定了复杂的处理逻辑，可能会导致性能问题。防抖可以减少滚动时触发处理函数的频率。</p><h3 id="四、防抖和节流的区别"><a href="#四、防抖和节流的区别" class="headerlink" title="四、防抖和节流的区别"></a>四、防抖和节流的区别</h3><p>在前端优化中，防抖（Debounce）和节流（Throttle）是常用的两种技术。虽然它们都用于限制函数的触发频率，但原理和应用场景有所不同。</p><ul><li><strong>防抖（Debounce）</strong>：在连续事件触发的情况下，只执行最后一次触发后的函数。例如：用户输入完成后的搜索请求。</li><li><strong>节流（Throttle）</strong>：确保在一定时间间隔内，函数只执行一次。例如：滚动条滚动时，控制每100ms执行一次滚动逻辑。</li></ul><p>两者的区别可以简单理解为：</p><ul><li><strong>防抖</strong>：电梯等人，如果有新乘客进入，电梯门重新打开，直到没有人进入才开始运行。</li><li><strong>节流</strong>：定时发车，公交车无论人是否已到齐，每隔固定时间发车一次。</li></ul><h3 id="五、带立即执行的防抖"><a href="#五、带立即执行的防抖" class="headerlink" title="五、带立即执行的防抖"></a>五、带立即执行的防抖</h3><p>在某些情况下，我们可能希望函数在首次触发时立即执行，而不是等到延迟结束后才执行。例如：在用户开始输入时立即发起一个搜索请求，然后在后续输入时使用防抖。</p><p>为此，我们可以在防抖函数中增加一个<code>immediate</code>参数来实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay, immediate = <span class="literal">false</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> callNow = immediate &amp;&amp; !timer;  <span class="comment">// 判断是否立即执行</span></span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (!immediate) fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">        <span class="keyword">if</span> (callNow) fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);  <span class="comment">// 立即执行</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种实现中，如果 <code>immediate</code> 参数为 <code>true</code>，则函数在第一次事件触发时立即执行，然后在延迟时间内不会再次触发。</p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>防抖（Debounce）是一种常用的前端优化手段，用于处理高频事件，通过延迟执行回调函数来减少不必要的操作，提升性能。它适用于输入框搜索、窗口调整、按钮点击等场景。</p><p>通过本文的讲解，相信你已经掌握了防抖的概念、原理以及实际应用。防抖技术简单而高效，合理使用防抖可以显著提升页面性能并改善用户体验。在开发中根据不同的场景选择合适的优化方式（防抖或节流），能让应用更加高效和顺畅。</p><hr><p><strong>最后一点小建议</strong>：在复杂应用中，防抖技术需要和业务逻辑合理搭配。例如，在输入框防抖的场景中，可能还需要考虑到用户的快速输入与响应速度间的平衡。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前端防抖（Debounce）详解及应用&quot;&gt;&lt;a href=&quot;#前端防抖（Debounce）详解及应用&quot; class=&quot;headerlink&quot; title=&quot;前端防抖（Debounce）详解及应用&quot;&gt;&lt;/a&gt;前端防抖（Debounce）详解及应用&lt;/h3&gt;&lt;p&gt;在前</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>javascript_map对象总结</title>
    <link href="https://promptonce.github.io/2024/10/13/javascript-map%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/13/javascript-map%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-13T06:35:24.000Z</published>
    <updated>2024-10-13T06:37:57.677Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">fruits.<span class="title function_">set</span>(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">fruits.<span class="title function_">set</span>(<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;yellow&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">get</span>(<span class="string">&quot;apple&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">has</span>(<span class="string">&quot;lemon&quot;</span>));</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>手写实现深拷贝一解决循环引用问题</title>
    <link href="https://promptonce.github.io/2024/10/13/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%80%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://promptonce.github.io/2024/10/13/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%80%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</id>
    <published>2024-10-13T06:27:34.000Z</published>
    <updated>2024-10-13T06:47:33.481Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">source, clonedMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> source !== <span class="string">&quot;object&quot;</span> || source == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果这个对象已经被拷贝过，直接从Map中返回</span></span><br><span class="line">  <span class="keyword">if</span>(clonedMap.<span class="title function_">has</span>(source))&#123;</span><br><span class="line">    <span class="keyword">return</span> clonedMap.<span class="title function_">get</span>(source);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> target = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(source) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在Map中记录这个对象</span></span><br><span class="line">  clonedMap.<span class="title function_">set</span>(source, target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> source)&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> source[key] === <span class="string">&quot;object&quot;</span> &amp;&amp; source[key] !== <span class="literal">null</span>)&#123;</span><br><span class="line">      target[key] = <span class="title function_">deepClone</span>(source[key], clonedMap);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      target[key] = source[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line">obj.<span class="property">self</span> = obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> copy = <span class="title function_">deepClone</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy);</span><br><span class="line"><span class="comment">//&#123; a: 1, b: &#123; c: 2 &#125;, self: [Circular] &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>手写实现深拷贝一基础版</title>
    <link href="https://promptonce.github.io/2024/10/13/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%80%E5%9F%BA%E7%A1%80%E7%89%88/"/>
    <id>https://promptonce.github.io/2024/10/13/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%80%E5%9F%BA%E7%A1%80%E7%89%88/</id>
    <published>2024-10-13T06:12:35.000Z</published>
    <updated>2024-10-13T06:22:21.469Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> source !== <span class="string">&quot;object&quot;</span> || source == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> target = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(source) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> source)&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> source[key] === <span class="string">&quot;object&quot;</span> &amp;&amp; source[key] !== <span class="literal">null</span>)&#123;</span><br><span class="line">      target[key] = <span class="title function_">deepClone</span>(source[key]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      target[key] = source[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> original = &#123;</span><br><span class="line">  <span class="attr">number</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="attr">string</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">  <span class="attr">array</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">prop1</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">prop2</span>: &#123;</span><br><span class="line">      <span class="attr">nested</span>: <span class="string">&quot;test2&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cloned = <span class="title function_">deepClone</span>(original);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloned);</span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  number: 123,</span></span><br><span class="line"><span class="comment">//  string: &#x27;hello&#x27;,</span></span><br><span class="line"><span class="comment">//  array: [ 1, 2, 3 ],</span></span><br><span class="line"><span class="comment">//  obj: &#123; prop1: &#x27;test&#x27;, prop2: &#123; nested: &#x27;test2&#x27; &#125; &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>针对循环引用对象会报栈溢出的错误</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>深拷贝的实现方式以及优缺点分析</title>
    <link href="https://promptonce.github.io/2024/10/13/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9%E5%88%86%E6%9E%90/"/>
    <id>https://promptonce.github.io/2024/10/13/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9%E5%88%86%E6%9E%90/</id>
    <published>2024-10-13T05:29:20.000Z</published>
    <updated>2024-10-13T05:54:22.305Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">    <span class="attr">country</span>: <span class="string">&quot;USA&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deepCopy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deepCopy);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改原对象</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line">obj.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&quot;San Francisco&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deepCopy);</span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  name: &#x27;John&#x27;,</span></span><br><span class="line"><span class="comment">//  age: 30,</span></span><br><span class="line"><span class="comment">//  address: &#123; city: &#x27;New York&#x27;, country: &#x27;USA&#x27; &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  name: &#x27;Alice&#x27;,</span></span><br><span class="line"><span class="comment">//  age: 30,</span></span><br><span class="line"><span class="comment">//  address: &#123; city: &#x27;San Francisco&#x27;, country: &#x27;USA&#x27; &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  name: &#x27;John&#x27;,</span></span><br><span class="line"><span class="comment">//  age: 30,</span></span><br><span class="line"><span class="comment">//  address: &#123; city: &#x27;New York&#x27;, country: &#x27;USA&#x27; &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><ol><li>JSON.stringify无法拷贝函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj);</span><br><span class="line"><span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure></li><li>JSON.stringify无法拷贝特殊对象，如Date、正则表达式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">  <span class="attr">regex</span>: <span class="string">&#x27;/test/&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;旧对象&quot;</span>, obj.<span class="property">date</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;旧对象&quot;</span>, obj.<span class="property">regex</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新对象&quot;</span>, newObj.<span class="property">date</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新对象&quot;</span>, newObj.<span class="property">regex</span>);</span><br><span class="line"><span class="comment">//旧对象 2024-10-13T05:42:50.531Z</span></span><br><span class="line"><span class="comment">//旧对象 /test/</span></span><br><span class="line"><span class="comment">//新对象 2024-10-13T05:42:50.531Z（输出字符串，而不是Date对象）</span></span><br><span class="line"><span class="comment">//新对象 /test/（输出空对象，而不是RegExp对象）</span></span><br></pre></td></tr></table></figure></li><li>JSON.stringify不会拷贝原型链上的属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> protoObj = &#123;<span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(protoObj);</span><br><span class="line">obj.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">obj.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">c</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">c</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li>JSON.stringify会忽略symbol和undefined属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;test&#x27;</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj);</span><br><span class="line"><span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker总结</title>
    <link href="https://promptonce.github.io/2024/10/12/docker%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/12/docker%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-12T15:18:58.000Z</published>
    <updated>2024-10-12T15:52:25.350Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker容器：结合虚拟机隔离与高效资源利用的最佳实践"><a href="#Docker容器：结合虚拟机隔离与高效资源利用的最佳实践" class="headerlink" title="Docker容器：结合虚拟机隔离与高效资源利用的最佳实践"></a><strong>Docker容器：结合虚拟机隔离与高效资源利用的最佳实践</strong></h3><p>在现代软件开发和部署中，容器技术正逐渐取代传统的虚拟机解决方案。Docker作为其中最流行的容器平台，凭借其高效的资源利用和灵活的环境隔离性，成为了开发者和运维人员的必备工具。那么，Docker容器到底是如何在保持隔离的同时提升效率的呢？它真的能取代虚拟机吗？让我们深入探讨。</p><hr><h3 id="虚拟机与Docker的区别"><a href="#虚拟机与Docker的区别" class="headerlink" title="虚拟机与Docker的区别"></a><strong>虚拟机与Docker的区别</strong></h3><h4 id="1-虚拟机的隔离性与开销"><a href="#1-虚拟机的隔离性与开销" class="headerlink" title="1. 虚拟机的隔离性与开销"></a>1. <strong>虚拟机的隔离性与开销</strong></h4><p>虚拟机技术通过虚拟化，将一台物理服务器分割成多个虚拟的“机器”，每个虚拟机都运行在独立的操作系统上，包括完整的内核和用户空间。这种方式提供了非常强的隔离性：每个虚拟机之间完全独立，宛如多台真实的物理服务器。</p><p>但是，这种隔离的代价是<strong>较高的资源开销</strong>。每个虚拟机都需要加载自己的操作系统内核，这不仅使得启动时间长，而且消耗大量的计算、存储和内存资源。这对于一些场景（如微服务架构、持续集成&#x2F;持续部署）来说，显得过于笨重和低效。</p><h4 id="2-Docker的轻量级容器"><a href="#2-Docker的轻量级容器" class="headerlink" title="2. Docker的轻量级容器"></a>2. <strong>Docker的轻量级容器</strong></h4><p>Docker容器则提供了一种更高效的方式：<strong>容器共享宿主机的操作系统内核</strong>，不再为每个实例加载独立的操作系统。每个Docker容器运行在一个轻量级的、独立的用户空间中，它通过Docker镜像定义应用程序和依赖库，保持了独立的文件系统和运行环境。</p><p>这意味着Docker容器能够像虚拟机一样提供隔离效果，但<strong>不需要虚拟化整个操作系统内核</strong>。这极大地降低了资源消耗，使容器的启动和停止非常迅速，可以在几秒内完成。</p><hr><h3 id="Docker容器的核心优势"><a href="#Docker容器的核心优势" class="headerlink" title="Docker容器的核心优势"></a><strong>Docker容器的核心优势</strong></h3><h4 id="1-独立文件系统与应用环境隔离"><a href="#1-独立文件系统与应用环境隔离" class="headerlink" title="1. 独立文件系统与应用环境隔离"></a>1. <strong>独立文件系统与应用环境隔离</strong></h4><p>Docker容器提供了一个独立的文件系统，应用程序及其依赖库都封装在镜像里。即使宿主机环境不同，容器内的应用运行效果也始终如一。这种用户空间的隔离让开发者可以放心地在不同环境中部署应用，而不必担心系统配置或依赖冲突的问题。</p><h4 id="2-共享宿主机内核"><a href="#2-共享宿主机内核" class="headerlink" title="2. 共享宿主机内核"></a>2. <strong>共享宿主机内核</strong></h4><p>Docker容器的轻量化设计源于其<strong>共享宿主机的操作系统内核</strong>。容器不需要加载自己的内核，而是直接利用宿主机的内核进行系统调用和资源管理。与虚拟机需要额外的硬件虚拟化和完整的操作系统开销不同，容器直接与宿主系统交互，这让它更加高效。</p><h4 id="3-启动迅速，资源开销小"><a href="#3-启动迅速，资源开销小" class="headerlink" title="3. 启动迅速，资源开销小"></a>3. <strong>启动迅速，资源开销小</strong></h4><p>由于容器不需要启动一个完整的操作系统，它的启动时间非常短，可以在几秒钟内完成。相比虚拟机需要几分钟才能完全启动，Docker容器更加适合频繁的启动和销毁操作，这对于微服务架构和自动化CI&#x2F;CD管道尤为重要。</p><h4 id="4-隔离与安全性"><a href="#4-隔离与安全性" class="headerlink" title="4. 隔离与安全性"></a>4. <strong>隔离与安全性</strong></h4><p>虽然容器共享内核，但通过Linux的命名空间（namespaces）和控制组（cgroups）机制，Docker实现了资源、进程和网络等方面的隔离，保证了容器之间的独立性和安全性。虽然这种隔离性不如虚拟机那么彻底，但在大多数应用场景下，已经足够安全和高效。</p><hr><h3 id="Docker是否能取代虚拟机？"><a href="#Docker是否能取代虚拟机？" class="headerlink" title="Docker是否能取代虚拟机？"></a><strong>Docker是否能取代虚拟机？</strong></h3><p>从上面的分析可以看出，<strong>Docker并不是虚拟机的完全替代品</strong>，但它在许多场景下具有更大的优势：</p><ul><li><strong>高效资源利用</strong>：Docker容器通过共享内核，避免了虚拟机加载整个操作系统的资源开销，显得更加轻量化。</li><li><strong>灵活部署和扩展</strong>：容器启动迅速，支持快速扩容和缩容，非常适合微服务架构和大规模的分布式系统。</li><li><strong>环境一致性</strong>：通过容器化，开发、测试和生产环境可以保持高度一致，解决了传统部署中的“环境不一致”问题。</li></ul><p>但是，Docker并不完全替代虚拟机，尤其是在某些<strong>高隔离</strong>和<strong>硬件依赖性高</strong>的场景中，虚拟机依然有其独特的优势。例如，虚拟机可以在不同的内核上运行，提供更严格的安全隔离。而Docker容器由于共享宿主机的内核，隔离强度不如虚拟机，存在内核级别的安全隐患。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>Docker容器在结合虚拟机隔离优势的同时，避免了虚拟机的资源浪费。它通过共享宿主机内核，提供了一个轻量级、高效的运行环境，特别适合现代的云原生应用和微服务架构。虽然它不完全取代虚拟机，但在资源消耗、启动速度和环境一致性等方面，Docker无疑是更好的选择。</p><p>对于大多数开发者和运维人员来说，Docker已经成为部署和管理应用的标准工具。而在那些对安全隔离要求极高的场景下，虚拟机依然是不可替代的解决方案。未来的趋势可能是两者结合，既享受容器的灵活性，又兼顾虚拟机的高隔离性。</p><hr><p><strong>参考文献：</strong></p><ul><li>Docker官方文档</li><li>虚拟化与容器技术的对比分析</li></ul><p>通过合理选择和组合这两种技术，可以在不同的场景中取得最佳的性能和灵活性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Docker容器：结合虚拟机隔离与高效资源利用的最佳实践&quot;&gt;&lt;a href=&quot;#Docker容器：结合虚拟机隔离与高效资源利用的最佳实践&quot; class=&quot;headerlink&quot; title=&quot;Docker容器：结合虚拟机隔离与高效资源利用的最佳实践&quot;&gt;&lt;/a&gt;&lt;s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>让自己开发的软件产品保持latest_version_release的意义</title>
    <link href="https://promptonce.github.io/2024/10/12/%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E4%BA%A7%E5%93%81%E4%BF%9D%E6%8C%81latest-version-release%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://promptonce.github.io/2024/10/12/%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E4%BA%A7%E5%93%81%E4%BF%9D%E6%8C%81latest-version-release%E7%9A%84%E6%84%8F%E4%B9%89/</id>
    <published>2024-10-12T14:31:27.000Z</published>
    <updated>2024-10-12T14:42:45.059Z</updated>
    
    <content type="html"><![CDATA[<p>有助于不断加深自己对技术的理解<br>热启动<br>站在高位思考</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有助于不断加深自己对技术的理解&lt;br&gt;热启动&lt;br&gt;站在高位思考&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组的浅拷贝</title>
    <link href="https://promptonce.github.io/2024/10/12/%E6%95%B0%E7%BB%84%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://promptonce.github.io/2024/10/12/%E6%95%B0%E7%BB%84%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2024-10-12T06:44:35.000Z</published>
    <updated>2024-10-12T06:48:52.323Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = arr1.<span class="title function_">slice</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//[ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = arr1.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">// 左闭右开</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//[ 3 ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>].<span class="title function_">concat</span>(arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//[ 0, 1, 2, 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [].<span class="title function_">concat</span>(arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);<span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>对象的浅拷贝</title>
    <link href="https://promptonce.github.io/2024/10/12/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://promptonce.github.io/2024/10/12/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2024-10-12T06:41:36.000Z</published>
    <updated>2024-10-12T06:41:48.050Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;a : <span class="number">1</span>, b : <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;a : <span class="number">1</span>, b : <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;...obj1&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">  <span class="keyword">if</span>(obj1.<span class="title function_">hasOwnProperty</span>(key))&#123;<span class="comment">// for in 会遍历原型上的属性，所以需要判断是否为自身的属性</span></span><br><span class="line">    obj2[key] = obj1[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123; a: 1, b: 2, c: &#123; d: 4 &#125; &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  obj2[key] = obj1[key];<span class="comment">// Object.keys()只会遍历对象自身的可枚举属性，所以不需要判断是否为自身的属性</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123; a: 1, b: 2, c: &#123; d: 4 &#125; &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>深拷贝与浅拷贝的区别</title>
    <link href="https://promptonce.github.io/2024/10/12/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://promptonce.github.io/2024/10/12/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2024-10-12T06:23:00.000Z</published>
    <updated>2024-10-12T06:41:17.626Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> originalObject = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">hobbies</span>: [<span class="string">&quot;reading&quot;</span>, <span class="string">&quot;coding&quot;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浅拷贝对象</span></span><br><span class="line"><span class="keyword">const</span> shallowCopyObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, originalObject);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改拷贝对象的属性</span></span><br><span class="line">shallowCopyObj.<span class="property">name</span> = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line">shallowCopyObj.<span class="property">hobbies</span>.<span class="title function_">push</span>(<span class="string">&quot;painting&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalObject);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shallowCopyObj);</span><br><span class="line"><span class="comment">//&#123; name: &#x27;John&#x27;, age: 30, hobbies: [ &#x27;reading&#x27;, &#x27;coding&#x27;, &#x27;painting&#x27; ] &#125;</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  name: &#x27;Alice&#x27;,</span></span><br><span class="line"><span class="comment">//  age: 30,</span></span><br><span class="line"><span class="comment">//  hobbies: [ &#x27;reading&#x27;, &#x27;coding&#x27;, &#x27;painting&#x27; ]</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>如果对象的属性为引用类型或复杂类型，修改拷贝对象的属性，会影响到原对象，修改原对象的属性，也会影响到拷贝对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组索引背后隐藏了哪些类型转换？</title>
    <link href="https://promptonce.github.io/2024/10/12/%E6%95%B0%E7%BB%84%E7%B4%A2%E5%BC%95%E8%83%8C%E5%90%8E%E9%9A%90%E8%97%8F%E4%BA%86%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%9F/"/>
    <id>https://promptonce.github.io/2024/10/12/%E6%95%B0%E7%BB%84%E7%B4%A2%E5%BC%95%E8%83%8C%E5%90%8E%E9%9A%90%E8%97%8F%E4%BA%86%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%9F/</id>
    <published>2024-10-12T05:34:49.000Z</published>
    <updated>2024-10-12T05:58:55.023Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="string">&quot;0&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">0</span>]++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a[&quot;0&quot;]的输出是&#x27;</span>, a[<span class="string">&quot;0&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a[0]的输出是&#x27;</span>, a[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//a[&quot;0&quot;]的输出是 3</span></span><br><span class="line"><span class="comment">//a[0]的输出是 3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="string">&quot;5&quot;</span>]);</span><br><span class="line"><span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = [];</span><br><span class="line"><span class="keyword">let</span> key = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line">obj[key] = <span class="string">&quot;value&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;[object Object]&quot;</span>])</span><br><span class="line"><span class="comment">// value</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;promptonce&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[myFunction] = <span class="string">&quot;函数作为索引&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[myFunction]);</span><br><span class="line"><span class="comment">// 函数作为索引</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> symIndex = <span class="title class_">Symbol</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">arr[symIndex] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[symIndex]);</span><br><span class="line"><span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> symIndex = <span class="title class_">Symbol</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">arr[symIndex] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> string = symIndex.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[string]);</span><br><span class="line"><span class="comment">// Symbol(index)</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>像素总结</title>
    <link href="https://promptonce.github.io/2024/10/10/%E5%83%8F%E7%B4%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/10/%E5%83%8F%E7%B4%A0%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-10T02:24:33.000Z</published>
    <updated>2024-10-10T03:17:34.704Z</updated>
    
    <content type="html"><![CDATA[<p>512x512RGB图像可以理解为由512x512x3个逻辑上的编码,计算机来决定如何渲染到屏幕上</p><p>电子图像的PPI<br>1英寸x1英寸的电子图片在某一行取一英寸，这一英寸有多少个像素点。</p><p>打印机的DPI<br>表示打印机的信息转化能力（一英寸输出多少个像素点且不损失信息）</p><p>高ppi如果人眼离的较远，且图像较小时可能无法区分相邻像素点，从而降低人眼的信息获取质量</p><p>PPI与DPI的对应：</p><ul><li>如果这张512x512的图片被定义为1英寸x1英寸，那么它的PPI就是512。（将512x512x3的数据表示在1英寸x1英寸的空间上）</li><li>当我们把这张图片打印出来时，如果打印机的DPI也是512，那么理论上，打印出来的图像每个像素点会对应一个墨点，效果会比较理想。</li></ul><p>假设我们有一张512x512像素的照片，想要打印成一张4英寸x4英寸的照片。</p><ul><li>计算PPI： 512像素 &#x2F; 4英寸 &#x3D; 128 PPI。</li><li>选择打印机： 如果我们的打印机最大支持1200 DPI，那么我们可以将图像的尺寸调整为4英寸x4英寸，分辨率设置为128 PPI进行打印，这样可以充分利用打印机的性能。</li><li>如果打印机只有300 DPI： 那么打印出来的图像会有一些模糊，因为每个墨点要对应多个像素。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;512x512RGB图像可以理解为由512x512x3个逻辑上的编码,计算机来决定如何渲染到屏幕上&lt;/p&gt;
&lt;p&gt;电子图像的PPI&lt;br&gt;1英寸x1英寸的电子图片在某一行取一英寸，这一英寸有多少个像素点。&lt;/p&gt;
&lt;p&gt;打印机的DPI&lt;br&gt;表示打印机的信息转化能力（一英寸</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JS中判断数组的方式有哪些?</title>
    <link href="https://promptonce.github.io/2024/10/07/JS%E4%B8%AD%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B/"/>
    <id>https://promptonce.github.io/2024/10/07/JS%E4%B8%AD%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B/</id>
    <published>2024-10-07T07:18:24.000Z</published>
    <updated>2024-10-07T08:13:44.931Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;对象的类型是&quot;</span>, <span class="keyword">typeof</span> obj);<span class="comment">// 对象的类型是 object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组的类型是&quot;</span>, <span class="keyword">typeof</span> arr);<span class="comment">// 数组的类型是 object</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objType = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj);</span><br><span class="line"><span class="keyword">let</span> arrType = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;对象的类型是&quot;</span>, objType);<span class="comment">// 对象的类型是 [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组的类型是&quot;</span>, arrType);<span class="comment">// 数组的类型是 [object Array]</span></span><br></pre></td></tr></table></figure><h2 id="通过原型链判断"><a href="#通过原型链判断" class="headerlink" title="通过原型链判断"></a>通过原型链判断</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br></pre></td></tr></table></figure><h2 id="通过Array-isArray-判断"><a href="#通过Array-isArray-判断" class="headerlink" title="通过Array.isArray()判断"></a>通过Array.isArray()判断</h2><p>ES6语法，如需运行在低版本浏览器上需要使用babel转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj =[];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj));</span><br></pre></td></tr></table></figure><h2 id="通过-instanceof-判断"><a href="#通过-instanceof-判断" class="headerlink" title="通过 instanceof 判断"></a>通过 instanceof 判断</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>css提高性能的方法</title>
    <link href="https://promptonce.github.io/2024/10/07/css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://promptonce.github.io/2024/10/07/css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2024-10-07T07:00:37.000Z</published>
    <updated>2024-10-07T07:03:15.360Z</updated>
    
    <content type="html"><![CDATA[<ol><li><strong>压缩 CSS 文件</strong>：减少文件大小，去掉不必要的空格和注释，这样文件体积更小，加载速度更快。</li><li><strong>移除未使用的样式</strong>：很多时候，写了样式没用上，导致 CSS 文件臃肿，清理掉没用的部分，减少体积。</li><li><strong>合并和分割 CSS 文件</strong>：合并多个 CSS 文件减少 HTTP 请求；也可以按需加载，只在需要时加载特定页面的样式。</li><li><strong>简化选择器</strong>：选择器不要太复杂，层级太深会增加计算负担，影响性能。尽量用类选择器，少用通配符和属性选择器。</li><li><strong>避免 @import</strong>：<code>@import</code> 导入 CSS 会增加额外请求，加载速度慢。尽量用 <code>&lt;link&gt;</code> 直接引入外部文件。</li><li><strong>减少重绘和回流</strong>：避免频繁使用会引起回流的属性，比如 <code>width</code>、<code>height</code>，动画时多用 <code>transform</code> 和 <code>opacity</code> 这种对性能影响小的属性。</li><li><strong>优化字体加载</strong>：Web 字体加载会影响页面渲染速度，尽量少用字体，设置 <code>font-display: swap</code>，让文字先显示，再加载字体。</li><li><strong>使用关键 CSS</strong>：首屏显示的 CSS 放在 <code>&lt;head&gt;</code> 里，确保页面先渲染出来，剩下的样式可以延迟加载。</li><li><strong>使用现代布局方式</strong>：像 CSS Grid 和 Flexbox 这些布局方式，比传统的 float 布局性能更好、代码更简洁。</li><li><strong>利用 CSS 变量</strong>：减少重复定义，提高代码的可维护性和简洁性。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;压缩 CSS 文件&lt;/strong&gt;：减少文件大小，去掉不必要的空格和注释，这样文件体积更小，加载速度更快。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移除未使用的样式&lt;/strong&gt;：很多时候，写了样式没用上，导致 CSS 文件臃肿，清理掉没用的部分</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>缓存总结</title>
    <link href="https://promptonce.github.io/2024/10/07/%E7%BC%93%E5%AD%98%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/07/%E7%BC%93%E5%AD%98%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-07T06:46:40.000Z</published>
    <updated>2024-10-07T06:47:45.188Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>强缓存</strong>就是在规定的时间内，浏览器直接从本地缓存中拿数据，不需要向服务器发送请求。这样，页面加载会更快。强缓存一般通过设置 <code>Expires</code> 或 <code>Cache-Control</code> 来控制缓存时间。</p></li><li><p><strong>协商缓存</strong>则是浏览器会先向服务器询问，之前缓存的内容有没有更新。如果服务器确认没有更新，浏览器继续使用缓存数据。如果内容有变化，服务器会返回新的资源。协商缓存的机制常见于 <code>Last-Modified</code> 和 <code>ETag</code> 这两个头信息。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;强缓存&lt;/strong&gt;就是在规定的时间内，浏览器直接从本地缓存中拿数据，不需要向服务器发送请求。这样，页面加载会更快。强缓存一般通过设置 &lt;code&gt;Expires&lt;/code&gt; 或 &lt;code&gt;Cache-Control&lt;/code&gt; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>进制总结</title>
    <link href="https://promptonce.github.io/2024/10/06/%E8%BF%9B%E5%88%B6%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/06/%E8%BF%9B%E5%88%B6%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-06T15:30:20.000Z</published>
    <updated>2024-10-06T15:32:06.455Z</updated>
    
    <content type="html"><![CDATA[<p>进制（Number Base）是表示数值的方式之一，用不同的数字和符号来表示不同的数值。最常见的进制有二进制、十进制、八进制和十六进制等。接下来，详细介绍这些不同的进制及它们之间的转换。</p><h3 id="1-什么是进制？"><a href="#1-什么是进制？" class="headerlink" title="1. 什么是进制？"></a>1. 什么是进制？</h3><p>进制是指用多少个不同的符号来表示一个数值的系统。例如，<strong>十进制</strong>使用0到9共十个符号；而<strong>二进制</strong>使用0和1两个符号。因此，”进制”就是表示数值的基本符号种类的数量。</p><h3 id="2-常见进制及其特点"><a href="#2-常见进制及其特点" class="headerlink" title="2. 常见进制及其特点"></a>2. 常见进制及其特点</h3><ol><li><p><strong>二进制（Binary，基数为2）</strong></p><ul><li>符号：0, 1</li><li>二进制的每一位只表示0或1。</li><li>常用于计算机和数字电路，因为电子元件只有开（1）或关（0）的状态。</li><li>例如，二进制数 <code>101</code> 表示十进制中的数字 5（从右到左依次表示 ( 1 \times 2^2 + 0 \times 2^1 + 1 \times 2^0 )）。</li></ul></li><li><p><strong>十进制（Decimal，基数为10）</strong></p><ul><li>符号：0, 1, 2, 3, 4, 5, 6, 7, 8, 9</li><li>是我们日常生活中最常用的进制。</li><li>例如，数字 <code>123</code> 表示 ( 1 \times 10^2 + 2 \times 10^1 + 3 \times 10^0 &#x3D; 123 )。</li></ul></li><li><p><strong>八进制（Octal，基数为8）</strong></p><ul><li>符号：0, 1, 2, 3, 4, 5, 6, 7</li><li>每一位表示8的幂，常用于计算机中早期的一些操作系统和硬件。</li><li>例如，八进制数 <code>17</code> 表示十进制中的数字 15（从右到左依次表示 ( 1 \times 8^1 + 7 \times 8^0 &#x3D; 15 )）。</li></ul></li><li><p><strong>十六进制（Hexadecimal，基数为16）</strong></p><ul><li>符号：0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F</li><li>用数字0-9和字母A-F表示，其中A表示10，B表示11，依此类推到F表示15。</li><li>十六进制常用于计算机编程，因为它可以简洁地表示二进制数。1个十六进制位可以表示4个二进制位（如<code>F</code>表示<code>1111</code>）。</li><li>例如，十六进制数 <code>1A</code> 表示十进制中的数字 26（从右到左依次表示 ( 1 \times 16^1 + 10 \times 16^0 &#x3D; 26 )）。</li></ul></li></ol><h3 id="3-进制转换"><a href="#3-进制转换" class="headerlink" title="3. 进制转换"></a>3. 进制转换</h3><ul><li><p><strong>二进制到十进制</strong></p><ul><li>方法：按位展开成2的幂次方求和。</li><li>例如：二进制 <code>1101</code> 转换为十进制就是 ( 1 \times 2^3 + 1 \times 2^2 + 0 \times 2^1 + 1 \times 2^0 &#x3D; 13 )。</li></ul></li><li><p><strong>十进制到二进制</strong></p><ul><li>方法：不断除以2，记录余数，然后逆序排列余数。</li><li>例如：十进制 <code>13</code> 转换为二进制就是：<ul><li>( 13 \div 2 &#x3D; 6 ) 余 1</li><li>( 6 \div 2 &#x3D; 3 ) 余 0</li><li>( 3 \div 2 &#x3D; 1 ) 余 1</li><li>( 1 \div 2 &#x3D; 0 ) 余 1</li><li>结果逆序为 <code>1101</code>。</li></ul></li></ul></li><li><p><strong>十进制到八进制</strong></p><ul><li>方法：不断除以8，记录余数，然后逆序排列余数。</li><li>例如：十进制 <code>64</code> 转换为八进制就是：<ul><li>( 64 \div 8 &#x3D; 8 ) 余 0</li><li>( 8 \div 8 &#x3D; 1 ) 余 0</li><li>( 1 \div 8 &#x3D; 0 ) 余 1</li><li>结果逆序为 <code>100</code>。</li></ul></li></ul></li><li><p><strong>十进制到十六进制</strong></p><ul><li>方法：不断除以16，记录余数（如果余数大于9，就用对应的字母），然后逆序排列余数。</li><li>例如：十进制 <code>26</code> 转换为十六进制就是：<ul><li>( 26 \div 16 &#x3D; 1 ) 余 10（即 A）</li><li>( 1 \div 16 &#x3D; 0 ) 余 1</li><li>结果逆序为 <code>1A</code>。</li></ul></li></ul></li></ul><h3 id="4-进制之间的快速转换"><a href="#4-进制之间的快速转换" class="headerlink" title="4. 进制之间的快速转换"></a>4. 进制之间的快速转换</h3><ul><li><strong>二进制到八进制</strong> 和 <strong>二进制到十六进制</strong> 可以通过分组快速转换：<ul><li><strong>二进制到八进制</strong>：每三位二进制数对应一位八进制数。例如：二进制 <code>101110</code> 可以分成 <code>101</code> 和 <code>110</code>，分别对应八进制的 <code>5</code> 和 <code>6</code>，所以结果是 <code>56</code>。</li><li><strong>二进制到十六进制</strong>：每四位二进制数对应一位十六进制数。例如：二进制 <code>11101100</code> 可以分成 <code>1110</code> 和 <code>1100</code>，分别对应十六进制的 <code>E</code> 和 <code>C</code>，所以结果是 <code>EC</code>。</li></ul></li></ul><h3 id="5-进制的实际应用"><a href="#5-进制的实际应用" class="headerlink" title="5. 进制的实际应用"></a>5. 进制的实际应用</h3><ul><li><strong>二进制</strong>：计算机底层运算、逻辑电路等。</li><li><strong>八进制</strong>：早期计算机系统，现代使用较少。</li><li><strong>十进制</strong>：日常生活中最常用，如数学运算。</li><li><strong>十六进制</strong>：编程中表示颜色代码（如 <code>#FF00FF</code>）、内存地址等。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>进制是用来表示数值的一种符号系统。</li><li>不同的进制系统有不同的符号数量和表示规则。</li><li>各进制之间的转换需要掌握其表示方式和运算规则。</li><li>计算机领域中最常用的是二进制和十六进制。十进制是日常生活中最为熟悉和使用的系统。</li></ul><p>掌握进制及其转换对理解计算机的工作原理和程序设计非常有帮助。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;进制（Number Base）是表示数值的方式之一，用不同的数字和符号来表示不同的数值。最常见的进制有二进制、十进制、八进制和十六进制等。接下来，详细介绍这些不同的进制及它们之间的转换。&lt;/p&gt;
&lt;h3 id=&quot;1-什么是进制？&quot;&gt;&lt;a href=&quot;#1-什么是进制？&quot; c</summary>
      
    
    
    
    
  </entry>
  
</feed>
