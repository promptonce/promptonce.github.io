<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PromptOnce</title>
  
  
  <link href="https://promptonce.github.io/atom.xml" rel="self"/>
  
  <link href="https://promptonce.github.io/"/>
  <updated>2024-10-29T17:08:27.550Z</updated>
  <id>https://promptonce.github.io/</id>
  
  <author>
    <name>penggan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nvm</title>
    <link href="https://promptonce.github.io/2024/10/30/nvm%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/30/nvm%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-29T17:08:05.000Z</published>
    <updated>2024-10-29T17:08:27.550Z</updated>
    
    <content type="html"><![CDATA[<p><code>nvm</code> 是 “Node Version Manager” 的缩写，用于管理 Node.js 的版本。对于 Node.js 开发者来说，有时候在不同的项目中需要不同的 Node.js 版本，而手动切换和管理这些版本会比较麻烦。<code>nvm</code> 能帮助用户轻松地安装、管理和切换不同的 Node.js 版本。</p><h3 id="1-安装-nvm"><a href="#1-安装-nvm" class="headerlink" title="1. 安装 nvm"></a>1. 安装 <code>nvm</code></h3><h4 id="macOS-和-Linux"><a href="#macOS-和-Linux" class="headerlink" title="macOS 和 Linux"></a>macOS 和 Linux</h4><p>在 macOS 和 Linux 系统上可以使用以下命令安装 <code>nvm</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash</span><br></pre></td></tr></table></figure><p>安装完成后，重启终端或运行以下命令，让 <code>nvm</code> 生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc   <span class="comment"># 或者 source ~/.zshrc，根据使用的终端而定</span></span><br></pre></td></tr></table></figure><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>在 Windows 上可以使用 <a href="https://github.com/coreybutler/nvm-windows"><code>nvm-windows</code></a> 版本，它是专门为 Windows 系统开发的 Node 版本管理器，与 Linux&#x2F;macOS 的版本稍有不同，但功能类似。下载并按照安装向导进行安装。</p><h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h3><ul><li><p><strong>安装特定版本的 Node.js</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install &lt;版本号&gt;</span><br></pre></td></tr></table></figure><p>例如，安装 Node.js 14：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 14</span><br></pre></td></tr></table></figure></li><li><p><strong>列出已安装的 Node.js 版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure><p>或者可以用 <code>nvm ls</code> 查看本地已安装的版本列表。</p></li><li><p><strong>切换 Node.js 版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use &lt;版本号&gt;</span><br></pre></td></tr></table></figure><p>例如，切换到 Node.js 14：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 14</span><br></pre></td></tr></table></figure></li><li><p><strong>查看可用的远程版本</strong></p><p>使用以下命令可以查看所有可安装的远程 Node.js 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure></li><li><p><strong>卸载某个版本的 Node.js</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall &lt;版本号&gt;</span><br></pre></td></tr></table></figure><p>例如，卸载 Node.js 14：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall 14</span><br></pre></td></tr></table></figure></li><li><p><strong>设置默认版本</strong></p><p>如果希望在每次新打开终端时使用某个默认版本，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="built_in">alias</span> default &lt;版本号&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3. 使用场景"></a>3. 使用场景</h3><p><code>nvm</code> 特别适用于以下场景：</p><ul><li><strong>不同项目的依赖</strong>：如果某个项目使用 Node.js 14 而另一个项目依赖 Node.js 16，可以使用 <code>nvm</code> 快速切换版本。</li><li><strong>测试兼容性</strong>：需要测试代码在多个 Node.js 版本上的表现，可以通过 <code>nvm</code> 安装多个版本并来回切换。</li><li><strong>方便升级或降级</strong>：<code>nvm</code> 让升级到最新版本、或临时降级到旧版本变得很容易。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><code>nvm</code> 只在当前用户的 shell 环境中生效，不会修改系统级的 Node.js 版本。</li><li>如果安装了 <code>nvm</code>，尽量不要再使用其他方式（如直接从官网安装）来安装 Node.js，以免发生冲突。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;nvm&lt;/code&gt; 是 “Node Version Manager” 的缩写，用于管理 Node.js 的版本。对于 Node.js 开发者来说，有时候在不同的项目中需要不同的 Node.js 版本，而手动切换和管理这些版本会比较麻烦。&lt;code&gt;nvm&lt;/c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>itopmap网站专题页面分析</title>
    <link href="https://promptonce.github.io/2024/10/27/itopmap%E7%BD%91%E7%AB%99%E4%B8%93%E9%A2%98%E9%A1%B5%E9%9D%A2%E5%88%86%E6%9E%90/"/>
    <id>https://promptonce.github.io/2024/10/27/itopmap%E7%BD%91%E7%AB%99%E4%B8%93%E9%A2%98%E9%A1%B5%E9%9D%A2%E5%88%86%E6%9E%90/</id>
    <published>2024-10-27T06:50:06.000Z</published>
    <updated>2024-10-27T07:29:53.232Z</updated>
    
    <content type="html"><![CDATA[<p>卷帘添加节流处理，防止当用户拖动滑块地图组件触发较频繁</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;卷帘添加节流处理，防止当用户拖动滑块地图组件触发较频繁&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>itopmap网站首页UI分析</title>
    <link href="https://promptonce.github.io/2024/10/26/itopmap%E7%BD%91%E7%AB%99%E9%A6%96%E9%A1%B5UI%E5%88%86%E6%9E%90/"/>
    <id>https://promptonce.github.io/2024/10/26/itopmap%E7%BD%91%E7%AB%99%E9%A6%96%E9%A1%B5UI%E5%88%86%E6%9E%90/</id>
    <published>2024-10-26T14:26:47.000Z</published>
    <updated>2024-10-26T14:41:32.675Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-地图的居中对齐和填充布局"><a href="#1-地图的居中对齐和填充布局" class="headerlink" title="1. 地图的居中对齐和填充布局"></a>1. <strong>地图的居中对齐和填充布局</strong></h3><ul><li>地图区域在整个页面中被居中显示，填充整个屏幕的可视区域。这通常是通过 <strong>flex布局</strong> 或 <strong>CSS grid布局</strong> 实现的，结合 <code>justify-content: center</code> 和 <code>align-items: center</code> 来水平和垂直居中。</li><li>地图本身会自动填满可用空间，保持响应性，可能使用了 <code>position: relative</code> 配合 <code>width: 100%</code> 和 <code>height: 100vh</code> 的设置，以确保地图在浏览器窗口大小变化时仍能适应。</li></ul><h3 id="2-浮动的工具栏和按钮"><a href="#2-浮动的工具栏和按钮" class="headerlink" title="2. 浮动的工具栏和按钮"></a>2. <strong>浮动的工具栏和按钮</strong></h3><ul><li>页面左侧和底部的几个按钮（放大镜、回退按钮、层级选择按钮等）是独立浮动的。它们的位置可能是通过 <strong>绝对定位</strong>（<code>position: absolute</code>）实现的，以便于将它们固定在地图上某个具体的坐标。</li><li><code>z-index</code> 可能用于这些工具栏按钮，以确保它们始终显示在地图之上，而不被地图或其他元素覆盖。</li></ul><h3 id="3-按钮组的相对布局和排列"><a href="#3-按钮组的相对布局和排列" class="headerlink" title="3. 按钮组的相对布局和排列"></a>3. <strong>按钮组的相对布局和排列</strong></h3><ul><li>底部的 Esri、BingMap、OSM 按钮看起来是成组显示的，应该是一个<strong>水平排列的 flexbox 容器</strong>。可能使用了 <code>display: flex</code> 和 <code>justify-content: space-around</code> 或 <code>justify-content: center</code> 来让按钮均匀分布，且保持在页面底部。</li><li>它们的位置可能通过 <code>position: absolute</code> 或 <code>position: fixed</code> 与底部对齐（例如 <code>bottom: 20px</code>），确保这些按钮在页面滚动时保持固定位置。</li></ul><h3 id="4-顶部菜单的相对和绝对布局"><a href="#4-顶部菜单的相对和绝对布局" class="headerlink" title="4. 顶部菜单的相对和绝对布局"></a>4. <strong>顶部菜单的相对和绝对布局</strong></h3><ul><li>顶部菜单（“提交订单”、“开启&#x2F;关闭Roi”）是悬浮在地图顶部的，通常是使用 <strong>绝对定位</strong> 或 <strong>固定定位</strong>（<code>position: fixed</code>），使其在页面滚动时也保持在视窗顶部不动。</li><li><code>top</code> 和 <code>left</code> 属性可以用来精确控制这些按钮的位置，而 <code>z-index</code> 则用于确保它们位于地图之上，始终可见。</li></ul><h3 id="5-图标和按钮的对齐"><a href="#5-图标和按钮的对齐" class="headerlink" title="5. 图标和按钮的对齐"></a>5. <strong>图标和按钮的对齐</strong></h3><ul><li>左侧一列工具栏图标的排列方式可以通过 <strong>垂直 flexbox</strong> 布局或 <strong>垂直对齐的 CSS 样式</strong> 实现，使所有按钮按顺序纵向排列。</li><li>这些按钮的位置可能是通过 <code>position: fixed</code> 或 <code>position: absolute</code> 实现的，与地图内容相对布局，不会在地图移动时发生变化。</li></ul><h3 id="6-z-index-的应用"><a href="#6-z-index-的应用" class="headerlink" title="6. z-index 的应用"></a>6. <strong>z-index 的应用</strong></h3><ul><li><code>z-index</code> 在此页面中起着重要作用，确保悬浮按钮（如工具栏按钮和底部地图切换按钮）总是显示在地图之上。通常 z-index 值较高的元素会覆盖值较低的元素，确保了用户交互性和可视性。</li></ul><h3 id="7-响应式设计"><a href="#7-响应式设计" class="headerlink" title="7. 响应式设计"></a>7. <strong>响应式设计</strong></h3><ul><li>地图本身具有响应性，在不同屏幕尺寸上会自动缩放。可能使用了媒体查询（<code>@media</code>）或者相对单位（如 <code>%</code> 或 <code>vh/vw</code>）来确保在不同设备和分辨率上都能自适应。</li></ul><h3 id="8-CSS-动画效果"><a href="#8-CSS-动画效果" class="headerlink" title="8. CSS 动画效果"></a>8. <strong>CSS 动画效果</strong></h3><ul><li>这些按钮在点击时可能有动画效果，比如放大、缩小或阴影变化，可以通过 <strong>CSS transitions</strong> 或 <strong>animations</strong> 实现。例如 <code>transform: scale(1.1)</code> 可以用来实现按钮点击后的轻微放大效果。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个页面布局运用了多种前端布局技术，包括 <code>flexbox</code>、<code>absolute positioning</code>、<code>z-index</code>、<code>relative positioning</code> 和响应式布局等，确保了地图和悬浮工具栏按钮的交互性和可视性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-地图的居中对齐和填充布局&quot;&gt;&lt;a href=&quot;#1-地图的居中对齐和填充布局&quot; class=&quot;headerlink&quot; title=&quot;1. 地图的居中对齐和填充布局&quot;&gt;&lt;/a&gt;1. &lt;strong&gt;地图的居中对齐和填充布局&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>从二叉树遍历视角看递归思想</title>
    <link href="https://promptonce.github.io/2024/10/25/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E8%A7%86%E8%A7%92%E7%9C%8B%E9%80%92%E5%BD%92%E6%80%9D%E6%83%B3/"/>
    <id>https://promptonce.github.io/2024/10/25/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E8%A7%86%E8%A7%92%E7%9C%8B%E9%80%92%E5%BD%92%E6%80%9D%E6%83%B3/</id>
    <published>2024-10-24T17:13:24.000Z</published>
    <updated>2024-10-24T17:38:12.040Z</updated>
    
    <content type="html"><![CDATA[<p>比如中序遍历左中右（适用于一棵仅有三个节点的小二叉树和由无数小的二叉树构成的大二叉树，区别在与小二叉树的子树是一个节点（最小的树），大二叉树的是一棵较大的树，都是符合二叉树的定义）</p><p>二叉树是一个抽象的概念，不要被名字误导，二叉树存储的信息包括二叉树的节点值和节点与节点之间的关系，理解了这层逻辑，叫二叉啥都无所谓。</p><p>中序遍历就是对二叉树中存储的信息进行读取的一种方式。读取的原则是先读取左子树的信息，再读取根节点的信息，再读取右子树的信息，这个简称逻辑A（如果子树中还有更小的子树-左子树或右子树, 根节点就是自身，不存在多态现象，根节点起连接节点关系的作用，这个子树中也执行同样的逻辑A，那么就可以将整棵树的信息按照中序遍历这种信息提取方式进行读取），其他遍历顺序同理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;比如中序遍历左中右（适用于一棵仅有三个节点的小二叉树和由无数小的二叉树构成的大二叉树，区别在与小二叉树的子树是一个节点（最小的树），大二叉树的是一棵较大的树，都是符合二叉树的定义）&lt;/p&gt;
&lt;p&gt;二叉树是一个抽象的概念，不要被名字误导，二叉树存储的信息包括二叉树的节点值和节</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>回溯算法总结</title>
    <link href="https://promptonce.github.io/2024/10/24/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/24/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-24T15:28:21.000Z</published>
    <updated>2024-10-25T04:50:32.326Z</updated>
    
    <content type="html"><![CDATA[<p>有递归就有回溯，因为如果递归进去如果没有找到结果就需要回到之前的位置往另一个方向递归（比如遍历树的情况），有的递归不容易看出回溯可能是没有用完全体的递归。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有递归就有回溯，因为如果递归进去如果没有找到结果就需要回到之前的位置往另一个方向递归（比如遍历树的情况），有的递归不容易看出回溯可能是没有用完全体的递归。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ps中新建图层分辨率，像素，厘米总结</title>
    <link href="https://promptonce.github.io/2024/10/24/ps%E4%B8%AD%E6%96%B0%E5%BB%BA%E5%9B%BE%E5%B1%82%E5%88%86%E8%BE%A8%E7%8E%87%EF%BC%8C%E5%83%8F%E7%B4%A0%EF%BC%8C%E5%8E%98%E7%B1%B3%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/24/ps%E4%B8%AD%E6%96%B0%E5%BB%BA%E5%9B%BE%E5%B1%82%E5%88%86%E8%BE%A8%E7%8E%87%EF%BC%8C%E5%83%8F%E7%B4%A0%EF%BC%8C%E5%8E%98%E7%B1%B3%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-24T12:47:51.000Z</published>
    <updated>2024-10-24T14:05:36.497Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何理解-Photoshop-中的分辨率、像素与物理尺寸：打印时的最佳实践"><a href="#如何理解-Photoshop-中的分辨率、像素与物理尺寸：打印时的最佳实践" class="headerlink" title="如何理解 Photoshop 中的分辨率、像素与物理尺寸：打印时的最佳实践"></a><strong>如何理解 Photoshop 中的分辨率、像素与物理尺寸：打印时的最佳实践</strong></h3><p>在设计或打印图像时，我们常常会遇到一些技术细节，比如<strong>像素</strong>、<strong>PPI（像素每英寸）</strong>、和<strong>物理尺寸</strong>。这些概念看似简单，但它们之间的关系决定了图像的质量和打印效果。如果你曾经想要打印一张图片，并发现打印出来的效果与预期不同，图像可能模糊或尺寸不对，那么你可能需要更好地理解它们之间的联系。本文将详细解析这些概念，并教你如何在 Photoshop 中使用这些参数进行正确的设置，确保打印出高质量的图像。</p><hr><h3 id="像素-vs-PPI-vs-物理尺寸：它们的区别是什么？"><a href="#像素-vs-PPI-vs-物理尺寸：它们的区别是什么？" class="headerlink" title="像素 vs. PPI vs. 物理尺寸：它们的区别是什么？"></a><strong>像素 vs. PPI vs. 物理尺寸：它们的区别是什么？</strong></h3><h4 id="1-像素（Pixel）"><a href="#1-像素（Pixel）" class="headerlink" title="1. 像素（Pixel）"></a>1. <strong>像素（Pixel）</strong></h4><p>像素是图像的基本单位。任何数字图像都是由一个个小像素点组成的，每个像素都有不同的颜色和亮度。当你在 Photoshop 中看到一个512×512像素的图片，意味着这个图片在屏幕上是由512个宽度和512个高度的像素点构成。</p><p>像素本身没有物理尺寸的概念，它是纯粹的数字单位，主要影响图像在屏幕上的显示大小。</p><h4 id="2-PPI（像素每英寸，Pixel-Per-Inch）"><a href="#2-PPI（像素每英寸，Pixel-Per-Inch）" class="headerlink" title="2. PPI（像素每英寸，Pixel Per Inch）"></a>2. <strong>PPI（像素每英寸，Pixel Per Inch）</strong></h4><p>PPI 表示每英寸包含多少个像素，它主要影响图像的打印质量和清晰度。较高的PPI意味着每英寸包含更多的像素，图像看起来更精细；较低的PPI则意味着图像在物理尺寸上变大，但像素分布较稀疏，可能导致图像变得模糊。</p><p>常见的PPI值：</p><ul><li><strong>72 PPI</strong>：适用于屏幕显示，如网页设计。</li><li><strong>300 PPI</strong>：用于高质量的打印输出，能确保清晰细腻的图像效果。</li></ul><h4 id="3-物理尺寸"><a href="#3-物理尺寸" class="headerlink" title="3. 物理尺寸"></a>3. <strong>物理尺寸</strong></h4><p>物理尺寸是图像在现实世界中的实际大小，如厘米或英寸。它与像素数和PPI直接相关。举个例子，如果你有一张分辨率为300 PPI的图片，并且宽度是1000像素，那么打印出来的物理宽度就是：<br>[<br>\frac{1000 , \text{像素}}{300 , \text{PPI}} &#x3D; 3.33 , \text{英寸} , (约 8.46 , \text{厘米})<br>]<br>这表明在300 PPI的分辨率下，1000像素宽的图像打印尺寸为3.33英寸。</p><hr><h3 id="PPI-与物理尺寸的关系"><a href="#PPI-与物理尺寸的关系" class="headerlink" title="PPI 与物理尺寸的关系"></a><strong>PPI 与物理尺寸的关系</strong></h3><p>PPI与物理尺寸之间的关系可以总结为：<strong>PPI越高，打印的物理尺寸越小；PPI越低，打印的物理尺寸越大</strong>。然而，较低的PPI会导致图像在打印时失去清晰度，因为每个像素对应的物理面积变大，像素被拉伸。</p><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><p>假设你有一张512×512像素的图片，并想打印成不同的尺寸：</p><ul><li><strong>300 PPI</strong>：打印出的尺寸约为 <strong>1.71×1.71英寸</strong>（4.35×4.35厘米），图像非常清晰。</li><li><strong>100 PPI</strong>：打印出的尺寸变为 <strong>5.12×5.12英寸</strong>（13×13厘米），图像变大，但清晰度下降。</li><li><strong>72 PPI</strong>：打印尺寸增至 <strong>7.11×7.11英寸</strong>（约18×18厘米），但细节变得模糊，适合屏幕显示，不适合高质量打印。</li></ul><hr><h3 id="如何在-Photoshop-中设置物理尺寸与分辨率"><a href="#如何在-Photoshop-中设置物理尺寸与分辨率" class="headerlink" title="如何在 Photoshop 中设置物理尺寸与分辨率"></a><strong>如何在 Photoshop 中设置物理尺寸与分辨率</strong></h3><p>当你准备打印图片时，以下是你在 Photoshop 中的操作步骤：</p><ol><li><strong>打开图像后，选择“图像 &gt; 图像大小”</strong>。</li><li>在弹出的对话框中，你可以调整图像的<strong>物理尺寸（宽度和高度）</strong>，并设置<strong>分辨率（PPI）</strong>。</li><li>勾选“重采样”选项，如果你希望 Photoshop 通过增加或减少像素数来适应你的物理尺寸和分辨率要求。</li><li>Photoshop 会根据你设定的PPI和物理尺寸，自动计算合适的像素数，或者调整现有的像素来满足你的需求。</li></ol><p><strong>重要提示</strong>：如果你不调整PPI而仅仅修改物理尺寸，Photoshop仍然会打印出你指定的尺寸，但图片可能会模糊。如果你想确保图像在指定的物理尺寸下保持高质量，建议使用300 PPI的分辨率。</p><hr><h3 id="为什么指定物理尺寸时要关注PPI？"><a href="#为什么指定物理尺寸时要关注PPI？" class="headerlink" title="为什么指定物理尺寸时要关注PPI？"></a><strong>为什么指定物理尺寸时要关注PPI？</strong></h3><p>在打印图像时，<strong>像素数</strong>是固定的，不能任意放大或缩小。当你指定了物理尺寸，PPI 决定了图像在这个物理尺寸下的清晰度。如果像素数不足，强行将图像打印到过大的物理尺寸上，图像会变得模糊。这就是为什么打印时要调整 PPI 来匹配图像的物理尺寸。</p><p><strong>换句话说，任意物理尺寸并不总是合适的。你需要确保图片的像素数和PPI值能够适应你所希望的打印大小和清晰度要求。</strong></p><hr><h3 id="总结：如何选择合适的-PPI-和打印尺寸"><a href="#总结：如何选择合适的-PPI-和打印尺寸" class="headerlink" title="总结：如何选择合适的 PPI 和打印尺寸"></a><strong>总结：如何选择合适的 PPI 和打印尺寸</strong></h3><p>在 Photoshop 中，物理尺寸、PPI 和像素数三者紧密相关。为了确保打印质量：</p><ul><li>如果你需要一个高质量的打印图像，通常建议使用 <strong>300 PPI</strong> 或更高的分辨率。</li><li>低于 <strong>100 PPI</strong> 的图像可能会在打印时显得模糊，尤其当你要求较大的物理尺寸时。</li><li>在打印前，确保根据图像的实际像素数和分辨率设置合理的物理尺寸。</li></ul><p>通过设定正确的 PPI 和尺寸，Photoshop 可以帮助你实现精确的打印效果，避免不清晰或不合适的尺寸问题。</p><hr><p>通过理解 PPI 和物理尺寸的关系，你可以更好地控制图像的输出质量，确保最终打印效果符合你的期望。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;如何理解-Photoshop-中的分辨率、像素与物理尺寸：打印时的最佳实践&quot;&gt;&lt;a href=&quot;#如何理解-Photoshop-中的分辨率、像素与物理尺寸：打印时的最佳实践&quot; class=&quot;headerlink&quot; title=&quot;如何理解 Photoshop 中的分</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在vue项目中，一个组件如何区分是放到pages目录还是components目录</title>
    <link href="https://promptonce.github.io/2024/10/23/%E5%9C%A8vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%EF%BC%8C%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E6%98%AF%E6%94%BE%E5%88%B0pages%E7%9B%AE%E5%BD%95%E8%BF%98%E6%98%AFcomponents%E7%9B%AE%E5%BD%95/"/>
    <id>https://promptonce.github.io/2024/10/23/%E5%9C%A8vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%EF%BC%8C%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E6%98%AF%E6%94%BE%E5%88%B0pages%E7%9B%AE%E5%BD%95%E8%BF%98%E6%98%AFcomponents%E7%9B%AE%E5%BD%95/</id>
    <published>2024-10-23T08:06:33.000Z</published>
    <updated>2024-10-23T08:06:51.280Z</updated>
    
    <content type="html"><![CDATA[<p>在Vue项目中，通常将页面级别的组件放置在pages目录下，而将可复用的组件放置在components目录下。这样的组织结构有助于代码的可维护性和可读性。</p><p>Pages目录：用于存放整个应用的页面组件，每个页面通常对应着应用中的一个路由。这些页面组件通常是独立的，不太可能在其他地方被复用。它们负责组织和呈现其他组件，通常包含了数据获取、状态管理等逻辑。</p><p>Components目录：用于存放可复用的组件，这些组件可以在应用的多个页面中使用。它们通常被设计成独立的、高度可定制的组件，例如按钮、导航栏、卡片等等。这样做可以提高代码的重用性，并且有助于保持应用的一致性和可维护性。</p><p>当你在开发Vue项目时，如果一个组件是整个页面的核心部分，那么它应该放在pages目录下；如果一个组件是可以被多个页面复用的，那么它应该放在components目录下。这样做有助于组织你的代码并且使其易于理解和维护。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Vue项目中，通常将页面级别的组件放置在pages目录下，而将可复用的组件放置在components目录下。这样的组织结构有助于代码的可维护性和可读性。&lt;/p&gt;
&lt;p&gt;Pages目录：用于存放整个应用的页面组件，每个页面通常对应着应用中的一个路由。这些页面组件通常是独立的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WMTS（Web Map Tile Service）</title>
    <link href="https://promptonce.github.io/2024/10/23/WMTS%EF%BC%88Web-Map-Tile-Service%EF%BC%89/"/>
    <id>https://promptonce.github.io/2024/10/23/WMTS%EF%BC%88Web-Map-Tile-Service%EF%BC%89/</id>
    <published>2024-10-23T08:05:28.000Z</published>
    <updated>2024-10-23T08:06:03.389Z</updated>
    
    <content type="html"><![CDATA[<p>本来一个服务器存放瓦片信息就可以了，但是人们发现和地图相关的style和切片方案和服务元数据都可以放在WMTS中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本来一个服务器存放瓦片信息就可以了，但是人们发现和地图相关的style和切片方案和服务元数据都可以放在WMTS中&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>yarn&amp;npm常见命令总结</title>
    <link href="https://promptonce.github.io/2024/10/23/yarn&amp;npm%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/23/yarn&amp;npm%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-23T05:49:22.000Z</published>
    <updated>2024-10-23T06:05:19.119Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># ==========================================================</span><br><span class="line"># <span class="variable constant_">NPM</span></span><br><span class="line"># ==========================================================</span><br><span class="line"></span><br><span class="line">npm set registry <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com # 注册模块镜像</span></span><br><span class="line">npm set disturl <span class="attr">https</span>:<span class="comment">//npmmirror.com/mirrors/node # node-gyp 编译依赖的 node 源码镜像</span></span><br><span class="line"></span><br><span class="line">## 以下选择添加</span><br><span class="line">npm set sass_binary_site <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/node-sass # node-sass 二进制包镜像</span></span><br><span class="line">npm set electron_mirror <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/electron/ # electron 二进制包镜像</span></span><br><span class="line">npm set puppeteer_download_host <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors # puppeteer 二进制包镜像</span></span><br><span class="line">npm set chromedriver_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/chromedriver # chromedriver 二进制包镜像</span></span><br><span class="line">npm set operadriver_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/operadriver # operadriver 二进制包镜像</span></span><br><span class="line">npm set phantomjs_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/phantomjs # phantomjs 二进制包镜像</span></span><br><span class="line">npm set selenium_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/selenium # selenium 二进制包镜像</span></span><br><span class="line">npm set node_inspector_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/node-inspector # node-inspector 二进制包镜像</span></span><br><span class="line">npm set sentrycli_cdnurl <span class="attr">https</span>:<span class="comment">//npmmirror.com/mirrors/sentry-cli/ # sentry-cli</span></span><br><span class="line"></span><br><span class="line">npm cache clean --force # 清空缓存</span><br><span class="line"></span><br><span class="line"># ==========================================================</span><br><span class="line"># <span class="variable constant_">YARN</span></span><br><span class="line"># ==========================================================</span><br><span class="line"></span><br><span class="line">yarn config set registry <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com # 注册模块镜像</span></span><br><span class="line">yarn config set disturl <span class="attr">https</span>:<span class="comment">//npmmirror.com/mirrors/node # node-gyp 编译依赖的 node 源码镜像</span></span><br><span class="line"></span><br><span class="line">## 以下选择添加</span><br><span class="line">yarn config set sass_binary_site <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/node-sass # node-sass 二进制包镜像</span></span><br><span class="line">yarn config set electron_mirror <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/electron/ # electron 二进制包镜像</span></span><br><span class="line">yarn config set puppeteer_download_host <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors # puppeteer 二进制包镜像</span></span><br><span class="line">yarn config set chromedriver_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/chromedriver # chromedriver 二进制包镜像</span></span><br><span class="line">yarn config set operadriver_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/operadriver # operadriver 二进制包镜像</span></span><br><span class="line">yarn config set phantomjs_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/phantomjs # phantomjs 二进制包镜像</span></span><br><span class="line">yarn config set selenium_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/selenium # selenium 二进制包镜像</span></span><br><span class="line">yarn config set node_inspector_cdnurl <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/mirrors/node-inspector # node-inspector 二进制包镜像</span></span><br><span class="line">yarn config set sentrycli_cdnurl <span class="attr">https</span>:<span class="comment">//npmmirror.com/mirrors/sentry-cli/ # sentry-cli</span></span><br><span class="line"></span><br><span class="line">yarn cache clean # 清空缓存</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn --network-timeout <span class="number">100000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>开源项目配置到服务器总结</title>
    <link href="https://promptonce.github.io/2024/10/23/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/23/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-23T04:58:46.000Z</published>
    <updated>2024-10-23T05:01:20.618Z</updated>
    
    <content type="html"><![CDATA[<p>在本地设备打包好所有依赖，通过服务器连接工具上传整个安装包，相当于执行离线安装。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在本地设备打包好所有依赖，通过服务器连接工具上传整个安装包，相当于执行离线安装。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>动态规划算法</title>
    <link href="https://promptonce.github.io/2024/10/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95/"/>
    <id>https://promptonce.github.io/2024/10/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95/</id>
    <published>2024-10-22T07:59:58.000Z</published>
    <updated>2024-10-22T08:01:11.838Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划是一种将复杂问题分解为更小的子问题并通过缓存子问题的解来避免重复计算的算法设计方法。它适用于具有<strong>重叠子问题</strong>和<strong>最优子结构</strong>性质的问题。动态规划通常用于优化问题，目的是通过构建递归关系和记忆化中间结果，找到全局最优解。</p><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><p>动态规划的核心思想是将一个复杂的问题分解为若干个子问题，然后通过递推的方式逐步解决这些子问题。它的基本步骤如下：</p><ol><li><strong>定义状态</strong>：确定问题的状态，也就是用哪些变量来描述当前子问题的状态。</li><li><strong>状态转移方程</strong>：找到子问题之间的递推关系（即状态转移方程），描述如何从已解决的子问题得到当前问题的解。</li><li><strong>边界条件</strong>：确定初始状态的值，通常是最小规模的问题的解。</li><li><strong>计算顺序</strong>：根据状态转移方程的依赖关系，从小到大计算每个子问题的解。</li></ol><p>动态规划常用来解决最优化问题，如最短路径问题、最大子序列和问题、背包问题等。</p><h4 id="动态规划的特性"><a href="#动态规划的特性" class="headerlink" title="动态规划的特性"></a>动态规划的特性</h4><ol><li><p><strong>重叠子问题</strong>：动态规划问题通常具有重叠子问题，即原问题可以分解成若干个相同的子问题。不同的子问题可能会在递归求解中被重复计算。如果使用简单的递归方法，会导致大量的重复计算，因此通过记忆化技术（如数组或表）存储子问题的解，可以避免重复计算。</p></li><li><p><strong>最优子结构</strong>：如果问题的最优解可以由其子问题的最优解构造而成，称为最优子结构。例如，求解最短路径时，如果最短路径经过某个点，那么从该点到终点的子路径也一定是最短路径。</p></li></ol><h4 id="动态规划的两种实现方式"><a href="#动态规划的两种实现方式" class="headerlink" title="动态规划的两种实现方式"></a>动态规划的两种实现方式</h4><ol><li><p><strong>自顶向下（记忆化搜索）</strong>：使用递归的方式自顶向下解决问题，同时将子问题的解存储在数组或哈希表中（称为“记忆化”），以便下次遇到相同的子问题时直接返回之前计算的结果，而不是重新计算。</p></li><li><p><strong>自底向上（迭代法）</strong>：先解决最简单的子问题，然后通过迭代的方式解决规模逐渐增大的问题。自底向上通常表现为使用一个数组或表，按照状态转移方程逐步填充表中的值。</p></li></ol><h4 id="动态规划的经典例题"><a href="#动态规划的经典例题" class="headerlink" title="动态规划的经典例题"></a>动态规划的经典例题</h4><h5 id="1-斐波那契数列"><a href="#1-斐波那契数列" class="headerlink" title="1. 斐波那契数列"></a>1. 斐波那契数列</h5><p>这是动态规划最简单的例子，斐波那契数列的递归公式为：<br>[<br>F(n) &#x3D; F(n-1) + F(n-2)<br>]<br>使用动态规划，可以避免递归的重复计算。</p><p><strong>状态定义</strong>：令 <code>dp[i]</code> 表示斐波那契数列第 <code>i</code> 项的值。</p><p><strong>状态转移方程</strong>：<br>[<br>dp[i] &#x3D; dp[i-1] + dp[i-2]<br>]</p><p><strong>边界条件</strong>：<br>[<br>dp[0] &#x3D; 0, \ dp[1] &#x3D; 1<br>]</p><p><strong>自底向上代码实现</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    dp = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">0</span>], dp[<span class="number">1</span>] = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure><h5 id="2-背包问题"><a href="#2-背包问题" class="headerlink" title="2. 背包问题"></a>2. 背包问题</h5><p>背包问题是经典的动态规划问题，描述如下：有一个背包容量为 <code>W</code>，有 <code>n</code> 个物品，每个物品有重量 <code>w_i</code> 和价值 <code>v_i</code>，问如何选择物品装入背包，使得装入背包的物品总价值最大。</p><p><strong>状态定义</strong>：<code>dp[i][j]</code> 表示前 <code>i</code> 个物品在背包容量为 <code>j</code> 时的最大价值。</p><p><strong>状态转移方程</strong>：<br>[<br>dp[i][j] &#x3D; \max(dp[i-1][j], dp[i-1][j-w_i] + v_i)<br>]<br>如果不选择第 <code>i</code> 个物品，则 <code>dp[i][j] = dp[i-1][j]</code>；如果选择，则 <code>dp[i][j] = dp[i-1][j-w_i] + v_i</code>。</p><p><strong>边界条件</strong>：<code>dp[0][j] = 0</code>（没有物品时最大价值为0）。</p><h5 id="3-最长公共子序列（LCS）"><a href="#3-最长公共子序列（LCS）" class="headerlink" title="3. 最长公共子序列（LCS）"></a>3. 最长公共子序列（LCS）</h5><p>给定两个序列，求它们的最长公共子序列。其状态转移方程为：</p><p>[<br>dp[i][j] &#x3D;<br>\begin{cases}<br>dp[i-1][j-1] + 1, &amp; \text{if } s1[i] &#x3D; s2[j] \<br>\max(dp[i-1][j], dp[i][j-1]), &amp; \text{if } s1[i] \neq s2[j]<br>\end{cases}<br>]</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>动态规划通过记忆化子问题的解，可以极大地提高算法的效率。掌握动态规划的关键在于能识别问题的<strong>重叠子问题</strong>和<strong>最优子结构</strong>，并合理地定义状态和状态转移方程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;动态规划是一种将复杂问题分解为更小的子问题并通过缓存子问题的解来避免重复计算的算法设计方法。它适用于具有&lt;strong&gt;重叠子问题&lt;/strong&gt;和&lt;strong&gt;最优子结构&lt;/strong&gt;性质的问题。动态规划通常用于优化问题，目的是通过构建递归关系和记忆化中间结果，找</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tomcat和nginx总结</title>
    <link href="https://promptonce.github.io/2024/10/20/nginx%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/20/nginx%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-20T10:13:54.000Z</published>
    <updated>2024-10-20T11:31:03.667Z</updated>
    
    <content type="html"><![CDATA[<p>nginx是一个高效的静态内容 Web 服务器，同时也是反向代理服务器，擅长处理静态资源、负载均衡和反向代理功能。</p><h2 id="vue发布的网站非根域名刷新404的错误"><a href="#vue发布的网站非根域名刷新404的错误" class="headerlink" title="vue发布的网站非根域名刷新404的错误"></a>vue发布的网站非根域名刷新404的错误</h2><p>*<em>解决方法：配置一个重定向规则，使得所有请求都指向Vue应用的入口文件 <code>index.html</code>。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name your_domain.com;  <span class="comment"># 替换为你的域名或IP地址</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /path/to/your/vue/app;  <span class="comment"># Vue应用打包后的文件存放目录</span></span><br><span class="line">        try_files $uri $uri/ /index.html;  <span class="comment"># 如果找不到文件，则返回index.html</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    index index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nginx是一个高效的静态内容 Web 服务器，同时也是反向代理服务器，擅长处理静态资源、负载均衡和反向代理功能。&lt;/p&gt;
&lt;h2 id=&quot;vue发布的网站非根域名刷新404的错误&quot;&gt;&lt;a href=&quot;#vue发布的网站非根域名刷新404的错误&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript 标记清除法总结</title>
    <link href="https://promptonce.github.io/2024/10/17/JavaScript-%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/17/JavaScript-%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-17T15:48:35.000Z</published>
    <updated>2024-10-17T16:22:47.720Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalVariable = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;I&#x27;m a global variable&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="string">&quot;codereasy&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">globalVariable</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">xiaoming</span>);</span><br><span class="line"><span class="comment">//(1) &#123;name: &quot;I&#x27;m a global variable&quot;&#125;</span></span><br><span class="line"><span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量可以被视为根， 因此他们是可达的</span></span><br><span class="line"><span class="keyword">let</span> globalVariable = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;I&#x27;m a global variable&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的参数和内部变量也是可达的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">someFunction</span>(<span class="params">someArgument</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> functionVariable = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;I&#x27;m a variable inside of a function&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(someArgument, functionVariable)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">someFunction</span>(globalVariable);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objectA = &#123;</span><br><span class="line"><span class="attr">objectProperty</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;I&#x27;m a property of an object&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objectA.<span class="property">objectProperty</span>);</span><br><span class="line"><span class="comment">// (1) &#123;name: &quot;I&#x27;m a global variable&quot;&#125;  </span></span><br><span class="line"><span class="comment">// (1) &#123;name: &quot;I&#x27;m a variable inside of a f...&#125;</span></span><br></pre></td></tr></table></figure><p>优点：标记清除法解决了循环依赖的问题<br>缺点：标记清除法会出现内存碎片</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>flask总结</title>
    <link href="https://promptonce.github.io/2024/10/17/flask%E6%80%BB%E7%BB%93/"/>
    <id>https://promptonce.github.io/2024/10/17/flask%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-16T16:56:07.000Z</published>
    <updated>2024-10-17T16:24:37.997Z</updated>
    
    <content type="html"><![CDATA[<p>服务器运行flask绑定所有端口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask run --host <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;服务器运行flask绑定所有端口&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript垃圾回收-引用计数法</title>
    <link href="https://promptonce.github.io/2024/10/16/JavaScript%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E6%B3%95/"/>
    <id>https://promptonce.github.io/2024/10/16/JavaScript%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E6%B3%95/</id>
    <published>2024-10-16T09:34:55.000Z</published>
    <updated>2024-10-16T09:37:08.517Z</updated>
    
    <content type="html"><![CDATA[<p>引用计数法进行垃圾回收内存泄露的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> objectA = &#123;<span class="attr">name</span>: <span class="string">&quot;Object A&quot;</span>&#125;;</span><br><span class="line">  <span class="keyword">let</span> objectB = &#123;<span class="attr">name</span>: <span class="string">&quot;Object B&quot;</span>&#125;;</span><br><span class="line">  objectA.<span class="property">otherObject</span> = objectB;</span><br><span class="line">  objectB.<span class="property">otherObject</span> = objectA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;引用计数法进行垃圾回收内存泄露的例子&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>this绑定相关面试题</title>
    <link href="https://promptonce.github.io/2024/10/16/this%E7%BB%91%E5%AE%9A%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://promptonce.github.io/2024/10/16/this%E7%BB%91%E5%AE%9A%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2024-10-16T09:06:22.000Z</published>
    <updated>2024-10-16T09:23:00.061Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span>)();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;全局window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;person&quot;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> fun = person.<span class="property">sayName</span>;</span><br><span class="line">  <span class="title function_">fun</span>();<span class="comment">// 全局window</span></span><br><span class="line">  person.<span class="title function_">sayName</span>(); <span class="comment">//person</span></span><br><span class="line">  (b = person.<span class="property">sayName</span>)();<span class="comment">// 全局window对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>双指针</title>
    <link href="https://promptonce.github.io/2024/10/16/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <id>https://promptonce.github.io/2024/10/16/%E5%8F%8C%E6%8C%87%E9%92%88/</id>
    <published>2024-10-16T06:48:09.000Z</published>
    <updated>2024-10-16T07:12:25.248Z</updated>
    
    <content type="html"><![CDATA[<p>有序并不是双指针使用的必要前提，但在某些情况下，<strong>有序数组</strong>确实可以帮助我们充分发挥双指针的优势，特别是在减少搜索空间和提高效率方面。双指针是一种灵活的算法技巧，可以根据具体场景应用于有序或无序的场景。下面将详细讨论。</p><h3 id="1-有序数组中的双指针"><a href="#1-有序数组中的双指针" class="headerlink" title="1. 有序数组中的双指针"></a>1. <strong>有序数组中的双指针</strong></h3><p>在有序数组或序列中使用双指针，可以利用排序的特性来快速定位解。这类问题通常依赖于数据的有序性来实现更高效的算法。例如，前面提到的 <strong>“Two Sum II”</strong> 问题，因为数组是有序的，双指针可以通过移动指针快速缩小搜索范围。如果数组是无序的，那么双指针这种方式在查找和筛选时会失去优势。</p><ul><li><strong>例子</strong>：<ul><li><strong>查找两数之和问题</strong>：利用双指针，从两端向中间靠拢，根据和与目标值的比较，决定移动哪一个指针。</li></ul></li></ul><h3 id="2-无序数组中的双指针"><a href="#2-无序数组中的双指针" class="headerlink" title="2. 无序数组中的双指针"></a>2. <strong>无序数组中的双指针</strong></h3><p>虽然有序数组能让双指针更高效，但双指针同样可以在<strong>无序数组</strong>中使用。常见的应用场景包括处理<strong>特定条件的子数组</strong>、<strong>滑动窗口问题</strong>、<strong>快慢指针遍历链表</strong>等。这些问题不依赖有序性，而是基于特定的逻辑条件来移动指针。</p><ul><li><strong>例子</strong>：<ul><li><strong>快慢指针（Floyd’s Tortoise and Hare Algorithm）</strong>：该算法常用于检测链表中的环，并且链表不需要有序。一个指针每次走一步（慢指针），另一个指针每次走两步（快指针），最终两个指针会相遇。</li><li><strong>滑动窗口</strong>：在处理动态长度的子数组问题时，双指针可以用来动态调整窗口的大小，维护窗口的边界。</li></ul></li></ul><h3 id="3-滑动窗口问题"><a href="#3-滑动窗口问题" class="headerlink" title="3. 滑动窗口问题"></a>3. <strong>滑动窗口问题</strong></h3><p>滑动窗口（Sliding Window）是一类经典的双指针应用，通常用于处理<strong>无序数组</strong>或字符串。在这些问题中，一个指针（左指针）固定窗口的起点，另一个指针（右指针）扩展窗口或收缩窗口，直到满足某个条件。</p><ul><li><strong>例子</strong>：<ul><li><strong>最长子数组问题</strong>：寻找一个数组中满足某些条件的最长子数组。双指针可以用来动态调整子数组的起始和结束位置，以优化解的查找。</li></ul></li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>双指针并不依赖数据有序与否，而是依赖问题的具体要求和性质。在有序数组中，双指针通常可以更加高效地解决问题，因为排序提供了一个明确的规则（例如大小关系）来指导指针的移动；在无序数组或其他数据结构中，双指针也可以用于解决子数组、链表问题等。主要的前提是问题能够通过调整两个位置来逐步缩小搜索范围或满足特定条件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有序并不是双指针使用的必要前提，但在某些情况下，&lt;strong&gt;有序数组&lt;/strong&gt;确实可以帮助我们充分发挥双指针的优势，特别是在减少搜索空间和提高效率方面。双指针是一种灵活的算法技巧，可以根据具体场景应用于有序或无序的场景。下面将详细讨论。&lt;/p&gt;
&lt;h3 id=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript正则表达式</title>
    <link href="https://promptonce.github.io/2024/10/16/JavaScript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://promptonce.github.io/2024/10/16/JavaScript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2024-10-16T06:36:10.000Z</published>
    <updated>2024-10-16T06:36:50.776Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isCharacter</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/[a-zA-Z0-9]/</span>.<span class="title function_">test</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>npm配置代理</title>
    <link href="https://promptonce.github.io/2024/10/16/npm%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <id>https://promptonce.github.io/2024/10/16/npm%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</id>
    <published>2024-10-15T17:35:00.000Z</published>
    <updated>2024-10-15T17:36:58.078Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">delete</span> proxy</span><br><span class="line">npm config set proxy <span class="attr">http</span>:<span class="comment">//proxy-server:port</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>显示绑定、隐式绑定、new绑定的优点</title>
    <link href="https://promptonce.github.io/2024/10/15/%E6%98%BE%E7%A4%BA%E7%BB%91%E5%AE%9A%E3%80%81%E9%9A%90%E5%BC%8F%E7%BB%91%E5%AE%9A%E3%80%81new%E7%BB%91%E5%AE%9A%E7%9A%84%E4%BC%98%E7%82%B9/"/>
    <id>https://promptonce.github.io/2024/10/15/%E6%98%BE%E7%A4%BA%E7%BB%91%E5%AE%9A%E3%80%81%E9%9A%90%E5%BC%8F%E7%BB%91%E5%AE%9A%E3%80%81new%E7%BB%91%E5%AE%9A%E7%9A%84%E4%BC%98%E7%82%B9/</id>
    <published>2024-10-15T15:53:02.000Z</published>
    <updated>2024-10-15T16:09:45.746Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式绑定</span></span><br><span class="line">obj1.<span class="title function_">foo</span>(); <span class="comment">// obj1</span></span><br><span class="line">obj2.<span class="title function_">foo</span>(); <span class="comment">// obj2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式绑定和显式绑定</span></span><br><span class="line">obj1.<span class="property">foo</span>.<span class="title function_">call</span>(obj2); <span class="comment">//obj2, 说明显式绑定优先级更高</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
</feed>
